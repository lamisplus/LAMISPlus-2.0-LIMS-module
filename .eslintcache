[{"C:\\Program Files\\test\\lims-module\\src\\index.js":"1","C:\\Program Files\\test\\lims-module\\src\\App.js":"2","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"7","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"8","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js":"9","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"10","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js":"11","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js":"12","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\api.js":"13","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js":"14","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"15","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"16","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js":"17","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js":"18","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"19","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"20","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResultModal.js":"21","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintResults.js":"22"},{"size":754,"mtime":1662627848796,"results":"23","hashOfConfig":"24"},{"size":1407,"mtime":1662628794489,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1662627855300,"results":"26","hashOfConfig":"24"},{"size":9235,"mtime":1662627848858,"results":"27","hashOfConfig":"24"},{"size":3056,"mtime":1662627848860,"results":"28","hashOfConfig":"24"},{"size":2922,"mtime":1662984155566,"results":"29","hashOfConfig":"24"},{"size":3069,"mtime":1662983387673,"results":"30","hashOfConfig":"24"},{"size":13732,"mtime":1662980880264,"results":"31","hashOfConfig":"24"},{"size":6396,"mtime":1662632689387,"results":"32","hashOfConfig":"24"},{"size":9166,"mtime":1662627855288,"results":"33","hashOfConfig":"24"},{"size":11124,"mtime":1662982928754,"results":"34","hashOfConfig":"24"},{"size":14130,"mtime":1662632923791,"results":"35","hashOfConfig":"24"},{"size":478,"mtime":1662970945973,"results":"36","hashOfConfig":"24"},{"size":4759,"mtime":1662628794564,"results":"37","hashOfConfig":"24"},{"size":101219,"mtime":1662628794593,"results":"38","hashOfConfig":"24"},{"size":4784,"mtime":1662627855281,"results":"39","hashOfConfig":"24"},{"size":8886,"mtime":1662633464364,"results":"40","hashOfConfig":"24"},{"size":18285,"mtime":1662628794546,"results":"41","hashOfConfig":"24"},{"size":11409,"mtime":1662983339169,"results":"42","hashOfConfig":"24"},{"size":7955,"mtime":1662720551973,"results":"43","hashOfConfig":"24"},{"size":16984,"mtime":1662717011974,"results":"44","hashOfConfig":"24"},{"size":3781,"mtime":1662628794573,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"10llkzz",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"49"},"C:\\Program Files\\test\\lims-module\\src\\index.js",["102"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\";  \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["103","104"],"C:\\Program Files\\test\\lims-module\\src\\App.js",["105"],"import React from \"react\";\r\nimport {\r\n  //MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\n\r\nimport Home from './main/webapp/jsx/components/Home'\r\nimport SampleCollection from './main/webapp/jsx/components/SampleCollection/SamplesCollection';\r\nimport PrintManifest from './main/webapp/jsx/components/SampleCollection/PrintManifest';\r\nimport SampleSearch from './main/webapp/jsx/components/SampleCollection/SampleOrderLists';\r\nimport Result from './main/webapp/jsx/components/SampleCollection/Result'\r\nimport AddResult from './main/webapp/jsx/components/SampleCollection/AddResults'\r\n\r\nexport default function App() {\r\n  return (\r\n      <div>\r\n      <ToastContainer />\r\n        <Switch>\r\n         <Route path=\"/result\">\r\n          <Result />\r\n         </Route>\r\n         <Route path=\"/add-result\">\r\n           <AddResult />\r\n         </Route>\r\n         <Route path=\"/print-manifest\">\r\n             <PrintManifest />\r\n           </Route>\r\n         <Route path=\"/create-manifest\">\r\n            <SampleCollection />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["106","107","108","109","110","111"],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",["112","113","114","115"],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import React, {useEffect, useCallback, useState, useRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport ManifestPrint from './ManifestPrint';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport PrintIcon from '@mui/icons-material/Print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst PrintManifest = (props) => {\r\n    let history = useHistory();\r\n    const sampleObj = history.location && history.location.state ? history.location.state.sampleObj : {}\r\n    console.log(\"props\",sampleObj)\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const manifestData = []\r\n    const [saved, setSaved] = useState(false);\r\n    const [localStore, SetLocalStore] = useState([]);\r\n    const [send, setSend] = useState(false);\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n      });\r\n\r\n    useEffect(() => {\r\n      const manifests = JSON.parse(localStorage.getItem('manifest'));\r\n      if (manifests) {\r\n        SetLocalStore(manifests);\r\n        localStorage.clear();\r\n      }else {\r\n        SetLocalStore(sampleObj)\r\n      }\r\n    }, []);\r\n\r\n     const sendManifest = async (e) => {\r\n            e.preventDefault()\r\n             await axios.get(`${url}lims/ready-manifests/${localStore.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                .then((resp) => {\r\n                    console.log(\"sending manifest\", resp)\r\n                    if (resp.data.errors.length > 0) {\r\n                        toast.error(resp.data.errors[0].reasons, {\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                         });\r\n                         setSend(true)\r\n                    }\r\n                    else {\r\n                         toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                        setSend(true)\r\n                    }\r\n\r\n                })\r\n        }\r\n\r\n  return (\r\n      <div>\r\n      <Card>\r\n         <Card.Body>\r\n         { Object.keys(localStore).length === 0 ?\r\n               <Alert variant='danger' style={{width:'100%',fontSize:'18px', textAlign: 'center'}}>\r\n                 <b>Sample Manifest</b> not created yet. pls complete the manifest form.\r\n               </Alert>\r\n             :\r\n            <>\r\n            <p style={{textAlign: 'right'}}>\r\n            { localStore.manifestStatus === \"Ready\" ?\r\n                <MatButton\r\n                     variant=\"contained\"\r\n                     color=\"success\"\r\n                     className={classes.button}\r\n                     startIcon={<SendIcon />}\r\n                     disabled={!send ? false : true}\r\n                     onClick={sendManifest}\r\n                 >\r\n                     Send Manifest\r\n                 </MatButton> : \" \"\r\n            }\r\n\r\n            <MatButton\r\n                 variant=\"contained\"\r\n                 color=\"success\"\r\n                 className={classes.button}\r\n                 startIcon={<PrintIcon />}\r\n                 disabled={!send ? false : true}\r\n                 onClick={handlePrint}\r\n             >\r\n                 Print\r\n             </MatButton>\r\n\r\n               <Link color=\"inherit\"\r\n                 to={{pathname: \"/\"}}\r\n                  >\r\n                 <MatButton\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n                     className={classes.button}\r\n                     startIcon={<HomeIcon />}>\r\n                     back Home\r\n                 </MatButton>\r\n                </Link>\r\n                  <Link color=\"inherit\"\r\n                     to={{pathname: \"/result\", state: { manifestObj: localStore }}}\r\n                      >\r\n                     <MatButton\r\n                         variant=\"contained\"\r\n                         color=\"secondary\"\r\n                         className={classes.button}\r\n                         startIcon={<HomeIcon />}>\r\n                         Results\r\n                     </MatButton>\r\n                    </Link>\r\n               </p>\r\n            <ManifestPrint sampleObj={localStore} ref={componentRef}/>\r\n            </>\r\n            }\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrintManifest;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport ConfigModal from './ConfigModal';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport {  Modal, ModalHeader, ModalBody, Row,\r\n    Col, Card, CardBody, Table,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { pcr_lab } from './pcr';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst CreateAManifest = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const samples = []\r\n    const [saved, setSaved] = useState(false);\r\n    const [send, setSend] = useState(false);\r\n    const [localStore, SetLocalStore] = useState([]);\r\n    const [manifestsId, setManifestsId] = useState(0);\r\n    const [status, setStatus] = useState(\"Pending\")\r\n    const [validate, setValidate] = useState({\r\n        dateScheduledForPickupSucess: false,\r\n        dateScheduledForPickupFail: false,\r\n        temperatureAtPickup: false,\r\n        receivingLabID: \"\",\r\n        receivingLabName: \"\",\r\n        courierRiderName: \"\",\r\n        courierContact: \"\"\r\n    })\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const toggleModal = () => setOpen(!open)\r\n\r\n    useEffect(() => {\r\n      const collectedSamples = JSON.parse(localStorage.getItem('samples'));\r\n      if (collectedSamples) {\r\n        SetLocalStore(collectedSamples);\r\n      }\r\n    }, []);\r\n\r\n    const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\"});\r\n\r\n    const [manifestData, setManifestData] = useState({\r\n\r\n         manifestID: \"\",\r\n         manifestStatus: \"Pending\",\r\n         sendingFacilityID: \"FH7LMnbnVlT\",\r\n         sendingFacilityName: \"CHC ZUNGERU\",\r\n         receivingLabID: pcrLabCode.labNo,\r\n         receivingLabName: pcrLabCode.name,\r\n         dateScheduledForPickup: \"\",\r\n         temperatureAtPickup: \"\",\r\n         samplePackagedBy: \"\",\r\n         courierRiderName: \"\",\r\n         courierContact: \"\",\r\n         createDate: \"\",\r\n         sampleInformation: localStore,\r\n         id: 0,\r\n         uuid: \"\"\r\n     })\r\n\r\n\r\n    const handleChange = (event) => {\r\n           checkPCRLab(event.target.value)\r\n           const { name, value } = event.target\r\n           setManifestData({ ...manifestData, [name]: value, receivingLabID: pcrLabCode.labNo,\r\n           receivingLabName: pcrLabCode.name, sampleInformation: localStore })\r\n     }\r\n\r\n    const checkPCRLab = (name) => {\r\n        pcr_lab.map(( val ) => {\r\n            if (val.name === name) {\r\n                setPcrLabCode({name: val.name, labNo: val.labNo})\r\n            }\r\n        })\r\n    }\r\n\r\n   const validateInputs = (manifestData) => {\r\n        //console.log(\"mani\",manifestData)\r\n        if (manifestData.dateScheduledForPickup.length === 0) {\r\n            validate.dateScheduledForPickupFail = true;\r\n        }\r\n\r\n        setValidate({validate})\r\n       //console.log(\"after\",validate)\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        validateInputs(manifestData)\r\n\r\n        console.log(\"xxx\",manifestData);\r\n\r\n        if (manifestData.dateScheduledForPickup.length === 0) {\r\n             toast.error(\"Sample Pick up date can not be empty\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n             });\r\n        }\r\n\r\n        if ( manifestData.receivingLabName.length === 0) {\r\n             toast.error(\"Receiving lab can not be empty\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n             });\r\n        }\r\n        else{\r\n               await axios.post(`${url}lims/manifests`, manifestData,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    setManifestsId(resp.data.id)\r\n                     console.log(\"response\", resp)\r\n                    setSaved(true);\r\n                    toast.success(\"Sample manifest saved successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                    manifestData.manifestID = resp.data.manifestID\r\n                    manifestData.sendingFacilityID = resp.data.sendingFacilityID\r\n                    manifestData.sendingFacilityName = resp.data.sendingFacilityName\r\n\r\n                    localStorage.setItem('manifest', JSON.stringify(manifestData));\r\n                    localStorage.removeItem(\"samples\");\r\n                    handleOpen()\r\n                });\r\n        }\r\n    }\r\n\r\n  return (\r\n      <>\r\n        <Card>\r\n            <CardBody>\r\n             <br/>\r\n             { localStore.length === 0 ?\r\n                <Alert variant='danger' style={{width:'100%',fontSize:'18px', textAlign: 'center'}}>\r\n                  <b>Manifest</b> has no sample logged. pls use the previous button to add samples.\r\n                </Alert>\r\n              :\r\n                <Form>\r\n                    <Row>\r\n                        <Col> <FormGroup>\r\n                         <Label for=\"dateScheduledForPickup\" className={classes.label}>Date & Time *</Label>\r\n                         <Input\r\n                             type=\"datetime-local\"\r\n                             name=\"dateScheduledForPickup\"\r\n                             id=\"dateScheduledForPickup\"\r\n                             placeholder=\"Date & Time Created\"\r\n                             className={classes.input}\r\n                             value={manifestData.dateScheduledForPickup}\r\n                             onChange={handleChange}\r\n\r\n                         />\r\n                          <FormText>Pick up date is a required field.</FormText>\r\n                     </FormGroup></Col>\r\n                        <Col><FormGroup>\r\n                         <Label for=\"receivingLabName\" className={classes.label}>Receiving Lab *</Label>\r\n                         <Input\r\n                             type=\"select\"\r\n                             name=\"receivingLabName\"\r\n                             value={pcrLabCode.name}\r\n                             id=\"receivingLabName\"\r\n                             onChange={handleChange}\r\n                             className={classes.input}\r\n                         >\r\n                           <option>\r\n                             Select PCR Lab\r\n                           </option>\r\n                           {pcr_lab.map((value, i) =>\r\n                           <option key={i} value={value.name} >{value.name}</option>)}\r\n                         </Input>\r\n                         <FormText>Receiving lab is a required field.</FormText>\r\n                     </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                          <Label for=\"receivingLabID\" className={classes.label}>Receiving Lab number *</Label>\r\n                          <Input\r\n                              type=\"text\"\r\n                              name=\"receivingLabID\"\r\n                              value={pcrLabCode.labNo}\r\n                              id=\"receivingLabID\"\r\n                              onChange={handleChange}\r\n                              className={classes.input}\r\n                              disabled\r\n                          />\r\n                      <FormText>Receiving lab Id is a required field.</FormText>\r\n                      </FormGroup></Col>\r\n                    </Row>\r\n                     <Row>\r\n                        <Col><FormGroup>\r\n                         <Label for=\"courierRiderName\" className={classes.label}>Courier Name *</Label>\r\n                         <Input\r\n                             type=\"text\"\r\n                             name=\"courierRiderName\"\r\n                             id=\"courierRiderName\"\r\n                             value={manifestData.courierRiderName}\r\n                             onChange={handleChange}\r\n                             className={classes.input}\r\n                         />\r\n                     <FormText>Courier name is a required field.</FormText>\r\n                     </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                         <Label for=\"courierContact\" className={classes.label}>Courier Contact *</Label>\r\n                         <Input\r\n                             type=\"text\"\r\n                             name=\"courierContact\"\r\n                             value={manifestData.courierContact}\r\n                             id=\"courierContact\"\r\n                             onChange={handleChange}\r\n                             className={classes.input}\r\n                         />\r\n                         <FormText>Courier contact is a required field.</FormText>\r\n                     </FormGroup></Col>\r\n                        <Col><FormGroup>\r\n                      <Label for=\"samplePackagedBy\" className={classes.label}>Sample Packaged By *</Label>\r\n                      <Input\r\n                          type=\"text\"\r\n                          name=\"samplePackagedBy\"\r\n                          value={manifestData.samplePackagedBy}\r\n                          id=\"samplePackagedBy\"\r\n                          onChange={handleChange}\r\n                          className={classes.input}\r\n                      />\r\n                      <FormText>Sample package by is a required field.</FormText>\r\n                  </FormGroup></Col>\r\n                    </Row>\r\n                     <Row>\r\n                        <Col> <FormGroup>\r\n                         <Label for=\"manifest_status\" className={classes.label}>Status</Label>\r\n                         <Input\r\n                             type=\"text\"\r\n                             name=\"manifestStatus\"\r\n                             id=\"manifestStatus\"\r\n                             value={status}\r\n                             onChange={handleChange}\r\n                             disabled\r\n                             className={classes.input}\r\n                         />\r\n\r\n                     </FormGroup></Col>\r\n                        <Col><FormGroup>\r\n                       <Label for=\"temperatureAtPickup\" className={classes.label}>Temperature at pickup</Label>\r\n                       <Input\r\n                           type=\"text\"\r\n                           name=\"temperatureAtPickup\"\r\n                           id=\"temperatureAtPickup\"\r\n                           value={manifestData.temperatureAtPickup}\r\n                           onChange={handleChange}\r\n                           className={classes.input}\r\n                       />\r\n                   <FormText>Temperature at pickup is a required.</FormText>\r\n                   </FormGroup></Col>\r\n                    </Row>\r\n                     <Row>\r\n                        <Col><FormGroup>\r\n                        <Label for=\"total_sample\" className={classes.label}>Total Sample</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"total_sample\"\r\n                            id=\"total_sample\"\r\n                            value={localStore.length}\r\n                            onChange={handleChange}\r\n                            disabled\r\n                            className={classes.input}\r\n                        />\r\n\r\n                    </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                        <Label for=\"test_type\" className={classes.label}>Test type</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"test_type\"\r\n                            id=\"test_type\"\r\n                            value=\"VL\"\r\n                            onChange={handleChange}\r\n                            disabled\r\n                            className={classes.input}\r\n                        />\r\n\r\n                    </FormGroup></Col>\r\n                    </Row>\r\n                    {\r\n                        !saved ?\r\n                         <>\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                            startIcon={<SaveIcon />} onClick={handleSubmit}>\r\n                              Save\r\n                            </Button>\r\n\r\n                        </> : \"\"\r\n                    }\r\n                </Form>\r\n                 }\r\n             </CardBody>\r\n        </Card>\r\n        { open ?\r\n        <ConfigModal modalstatus={open} togglestatus={toggleModal} manifestsId={manifestsId} saved={saved} /> : \" \"}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default CreateAManifest;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js",["211","212","213","214","215","216","217","218","219","220","221","222","223","224"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport {logo} from './pcr'\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Row, Col,Input,\r\n    FormGroup,\r\n    Label,Card, CardBody, Table\r\n} from 'reactstrap';\r\n\r\nlet today = new Date().toLocaleDateString('en-us', { weekday:\"long\", year:\"numeric\", month:\"short\", day:\"numeric\"})\r\n\r\nclass ManifestPrint extends React.Component {\r\n  render() {\r\n    //console.log(this.props.sampleObj)\r\n    return (\r\n             <Card>\r\n              <CardBody>\r\n               <Row>\r\n                  <span>{today}</span>\r\n                     <Table size=\"sm\">\r\n                          <tbody>\r\n                               <tr>\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\" className=\"text-center\">\r\n                                    <img src={logo} style={{width: \"80px\", height: \"80px\"}}/>\r\n                                  </th>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\"><h2 className=\"text-center\">NISRN TRANSPORTATION MANIFEST</h2></th>\r\n\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                  </Row>\r\n                <br/>\r\n                <br />\r\n            <Row>\r\n                   <Table bordered size=\"sm\">\r\n                      <tbody>\r\n                           <tr>\r\n                              <th scope=\"row\">Pick Up Date:</th>\r\n                              <td>{this.props.sampleObj.dateScheduledForPickup === null ? \" \" : this.props.sampleObj.dateScheduledForPickup?.replace(\"T\", \" \")}</td>\r\n                              <th scope=\"row\">Destination:</th>\r\n                              <td>{this.props.sampleObj.receivingLabName}</td>\r\n                              <th scope=\"row\">PCR Lab Number:</th>\r\n                              <td>{this.props.sampleObj.receivingLabID}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <th scope=\"row\">Status:</th>\r\n                              <td>{this.props.sampleObj.manifestStatus}</td>\r\n                              <th scope=\"row\">Manifest Id:</th>\r\n                              <td>{this.props.sampleObj.manifestID}</td>\r\n                              <th scope=\"row\">Sample Temperature:</th>\r\n                              <td>{this.props.sampleObj.temperatureAtPickup}</td>\r\n                            </tr>\r\n                             <tr>\r\n                              <th scope=\"row\">Courier Name:</th>\r\n                              <td>{this.props.sampleObj.courierRiderName}</td>\r\n                              <th scope=\"row\">Courier Contact:</th>\r\n                              <td>{this.props.sampleObj.courierContact}</td>\r\n                              <th scope=\"row\">Test Type:</th>\r\n                              <td>VL</td>\r\n                            </tr>\r\n                      </tbody>\r\n                    </Table>\r\n              </Row>\r\n              <br/>\r\n              <Row>\r\n                     <Table striped bordered size=\"sm\">\r\n                        <thead style={{  backgroundColor:'#014d88', color:'#fff' }}>\r\n                          <tr>\r\n                            <th>Facility</th>\r\n                            <th>Patient ID</th>\r\n                            <th>Sample ID</th>\r\n                            <th>Sample Type</th>\r\n                            <th>Date Collected</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.sampleObj.sampleInformation && this.props.sampleObj.sampleInformation.map((data, i) => (\r\n                                 <tr key={i}>\r\n                                    <td scope=\"row\">{this.props.sampleObj.sendingFacilityName}</td>\r\n                                    <td>{data.patientID[0].idNumber}</td>\r\n                                    <td>{data.sampleID}</td>\r\n                                    <td>{data.sampleType}</td>\r\n                                    <td>{data.sampleCollectionDate}</td>\r\n                                  </tr>\r\n                            ))}\r\n                        </tbody>\r\n                      </Table>\r\n                </Row>\r\n                <br />\r\n                <span>LAMISPlus 2.0</span>\r\n              </CardBody>\r\n             </Card>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ManifestPrint;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["225","226","227","228","229","230","231","232"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js",["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport { Badge, Spinner } from 'reactstrap';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport AddResultModal from './AddResultModal';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CachedIcon from '@mui/icons-material/Cached';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport PrintIcon from '@mui/icons-material/Print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport PrintResults from './PrintResults';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Result = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    //console.log(\"maniObj\",manifestObj)\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [results, setResults] = useState([])\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const toggleModal = () => setOpen(!open)\r\n\r\n    const componentRef = useRef();\r\n\r\n    const loadResults = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}lims/manifest-results/${manifestObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"results\", response);\r\n\r\n           //setResults([]);\r\n            setLoading(false)\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n    const sampleStatus = e =>{\r\n        if(parseInt(e)===1){\r\n            return <p><Badge  color=\"success\">Completed</Badge></p>\r\n        }else if(parseInt(e)===2){\r\n            return <p><Badge  color=\"danger\">Rejected</Badge></p>\r\n        }else if(parseInt(e)===3){\r\n            return <p><Badge  color=\"info\">In-Progress</Badge></p>\r\n        }else if(parseInt(e)===4){\r\n            return <p><Badge  color=\"warning\">Re-Run</Badge></p>\r\n        }else{\r\n            return <p><Badge  color=\"dark\">Result Pending</Badge></p>\r\n        }\r\n    }\r\n\r\n    const resultTestType = e => {\r\n        if(parseInt(e)===2){\r\n            return <p><Badge  color=\"primary\">Viral Load</Badge></p>\r\n        }else if(parseInt(e)===1){\r\n            return <p><Badge  color=\"info\">EID</Badge></p>\r\n        }\r\n    }\r\n\r\n    const reload = e => {\r\n        console.log(\"reload results\");\r\n        loadResults();\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n      });\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n           <p style={{textAlign: 'right'}}>\r\n             <MatButton\r\n                   variant=\"contained\"\r\n                   color=\"dark\"\r\n                   className={classes.button}\r\n                   startIcon={<AddIcon />}\r\n                   onClick={handleOpen}\r\n               >\r\n                   Add Result\r\n               </MatButton>\r\n             <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<CachedIcon />}\r\n              onClick={reload}>\r\n              Refresh\r\n            </MatButton>\r\n              <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  className={classes.button}\r\n                  startIcon={<PrintIcon />}\r\n\r\n                  onClick={handlePrint}\r\n              >\r\n                  Print\r\n              </MatButton>\r\n\r\n             <Link color=\"inherit\"\r\n               to={{pathname: \"/\"}}\r\n                >\r\n               <MatButton\r\n                   variant=\"contained\"\r\n                   color=\"primary\"\r\n                   className={classes.button}\r\n                   startIcon={<HomeIcon />}\r\n                   >\r\n                   back Home\r\n               </MatButton>\r\n              </Link>\r\n\r\n             </p>\r\n             <hr />\r\n              {\r\n//                results.length  === 0 ? <p> <Spinner color=\"primary\" /> Loading Please Wait</p> :\r\n                <>\r\n                   <Alert style={{width:'100%',fontSize:'20px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                          <Alert.Heading>PCR Sample Results</Alert.Heading>\r\n                   </Alert>\r\n                  <br/>\r\n                  <PrintResults manifestObj={manifestObj} ref={componentRef}/>\r\n\r\n                </>\r\n              }\r\n\r\n         </Card.Body>\r\n       </Card>\r\n       { open ?\r\n        <AddResultModal modalstatus={open} togglestatus={toggleModal} manifestObj={manifestObj} /> : \" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { CardBody,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst AddResult = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n    const sampleIDs = []\r\n    manifestObj.sampleInformation.map((e) => {\r\n        sampleIDs.push(e.sampleID)\r\n    })\r\n\r\n    //console.log(\"maniObj\",manifestObj)\r\n    //console.log(\"permissions\",permissions)\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [results, setResults] = useState({\r\n         manifestID: manifestObj.manifestID,\r\n         receivingFacilityID: manifestObj.receivingLabID,\r\n         receivingFacilityName: manifestObj.receivingLabName,\r\n         sendingPCRLabID: manifestObj.sendingFacilityID,\r\n         sendingPCRLabName: manifestObj.sendingFacilityName,\r\n         testType: \"Viral Load\",\r\n         samples: []\r\n    })\r\n\r\n    const [initialValue, SetInitialValue] = useState(0)\r\n\r\n    const [inputFields, setInputFields] = useState([{\r\n        testResult: \"\",\r\n        resultDate: \"\",\r\n        pcrLabSampleNumber: \"\",\r\n        approvalDate: \"\",\r\n        assayDate: \"\",\r\n        sampleTestable: \"\",\r\n        sampleStatus: \"\",\r\n        sampleID: sampleIDs[initialValue]\r\n    }])\r\n\r\n     const loadResults = useCallback(async () => {\r\n        try {\r\n\r\n            setLoading(false)\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n    const assignSampleId = () => {\r\n\r\n    }\r\n\r\n     const handleChange = (i, event) => {\r\n           let data = [...inputFields]\r\n           const { name, value } = event.target\r\n           data[i][name] = value\r\n           setResults({ ...results, samples: data})\r\n     }\r\n\r\n     const handleSubmit = async (e) => {\r\n         e.preventDefault()\r\n        console.log(\"results\",results)\r\n        //history.push(\"/\");\r\n     }\r\n\r\n     const addField = (e) => {\r\n        e.preventDefault()\r\n        SetInitialValue(initialValue+1)\r\n\r\n        console.log(initialValue)\r\n        console.log(sampleIDs)\r\n        console.log(sampleIDs[initialValue])\r\n\r\n        if (initialValue > 0) {\r\n            let newField = {\r\n                   testResult: \"\",\r\n                   resultDate: \"\",\r\n                   pcrLabSampleNumber: \"\",\r\n                   approvalDate: \"\",\r\n                   assayDate: \"\",\r\n                   sampleTestable: \"\",\r\n                   sampleStatus: \"\",\r\n                   sampleID: sampleIDs[initialValue]\r\n               }\r\n\r\n          if (initialValue < sampleIDs.length) {\r\n               setInputFields([...inputFields, newField])\r\n          }else{\r\n            toast.error(\"Manifest has no sample Id\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          }\r\n\r\n        }\r\n\r\n     }\r\n\r\n     const removeField = (index, e) => {\r\n        e.preventDefault()\r\n        SetInitialValue(initialValue-1)\r\n        let data = [...inputFields];\r\n            data.splice(index, 1)\r\n            setInputFields(data)\r\n     }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n\r\n          <p style={{textAlign: 'right'}}>\r\n          <Link color=\"inherit\"\r\n            to={{pathname: \"/\"}}\r\n             >\r\n            <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<HomeIcon />}>\r\n                back Home\r\n            </MatButton>\r\n           </Link>\r\n          </p>\r\n           <hr />\r\n           <Form>\r\n                 <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                        <Alert.Heading>Basic Manifest Information</Alert.Heading>\r\n                 </Alert>\r\n                <Row>\r\n                  <Col> <FormGroup>\r\n                       <Label for=\"manifestID\" className={classes.label}>Manifest Id</Label>\r\n\r\n                       <Input\r\n                           type=\"text\"\r\n                           name=\"manifestID\"\r\n                           id=\"manifestID\"\r\n                           placeholder=\"manifest ID\"\r\n                           className={classes.input}\r\n                           onChange={handleChange}\r\n                           value={manifestObj.manifestID}\r\n                           disabled\r\n                       />\r\n                   </FormGroup></Col>\r\n                  <Col><FormGroup>\r\n                   <Label for=\"testType\" className={classes.label}>Test Type</Label>\r\n\r\n                   <Input\r\n                       type=\"text\"\r\n                       name=\"testType\"\r\n                       id=\"testType\"\r\n                       placeholder=\"Test Type\"\r\n                       className={classes.input}\r\n                       onChange={handleChange}\r\n                       value=\"Viral Load  \"\r\n                   />\r\n               </FormGroup></Col>\r\n                  <Col></Col>\r\n                  <Col></Col>\r\n                </Row>\r\n              <Row>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabName\" className={classes.label}>Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabName\"\r\n                         id=\"sendingPCRLabName\"\r\n                         placeholder=\"Sending PCR LabName\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabID\" className={classes.label}>Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabID\"\r\n                         id=\"sendingPCRLabID\"\r\n                         placeholder=\"Sending PCR Lab ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col> <FormGroup>\r\n                     <Label for=\"receivingFacilityName\" className={classes.label}>Receiving Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityName\"\r\n                         id=\"receivingFacilityName\"\r\n                         placeholder=\"Receiving Facility Name\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"receivingFacilityID\" className={classes.label}>Receiving Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityID\"\r\n                         id=\"receivingFacilityID\"\r\n                         placeholder=\"Receiving Facility ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n              </Row>\r\n              <br />\r\n                <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#992E62', color: \"#fff\", textAlign: 'center'}}>\r\n                  <Alert.Heading>PCR Sample Details</Alert.Heading>\r\n               </Alert>\r\n               {\r\n                    manifestObj.sampleInformation.length > 0 && inputFields.map((data, i) => (\r\n                    <>\r\n                          <Row>\r\n                             <Col>\r\n                              <FormGroup>\r\n                                    <Label for=\"sampleID\" className={classes.label}>Sample ID *</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"sampleID\"\r\n                                        id=\"sampleID\"\r\n                                        className={classes.input}\r\n                                        onChange={ e => handleChange(i, e)}\r\n                                    >\r\n                                     <option hidden>\r\n                                         Select Sample Id\r\n                                     </option>\r\n                                     { sampleIDs && sampleIDs.map((sample, i) =>\r\n                                     <option key={i} value={sample} >{sample}</option>)}\r\n                                    </Input>\r\n                                </FormGroup>\r\n                             </Col>\r\n                              <Col>\r\n                               <FormGroup>\r\n                                     <Label for=\"surName\" className={classes.label}>Sample Testable *</Label>\r\n                                     <Input\r\n                                         type=\"select\"\r\n                                         name=\"sampleTestable\"\r\n                                         id=\"sampleTestable\"\r\n                                         className={classes.input}\r\n                                         onChange={ e => handleChange(i, e)}\r\n                                     >\r\n                                      <option hidden>\r\n                                          Is Sample Testable ?\r\n                                      </option>\r\n                                      <option value=\"true\" >True</option>\r\n                                      <option value=\"false\" >False</option>\r\n                                     </Input>\r\n                                 </FormGroup>\r\n                              </Col>\r\n\r\n                             <Col>\r\n                               <FormGroup>\r\n                                     <Label for=\"sampleStatus\" className={classes.label}>Sample Status *</Label>\r\n                                     <Input\r\n                                         type=\"select\"\r\n                                         name=\"sampleStatus\"\r\n                                         id=\"sampleStatus\"\r\n                                         className={classes.input}\r\n                                         onChange={ e => handleChange(i, e)}\r\n                                     >\r\n                                      <option hidden>\r\n                                          Select Sample status\r\n                                      </option>\r\n                                      <option value=\"1\" >Completed</option>\r\n                                      <option value=\"2\" >Rejected</option>\r\n                                      <option value=\"3\" >In-Progress</option>\r\n                                      <option value=\"4\" >Re-run</option>\r\n                                     </Input>\r\n                                 </FormGroup>\r\n                              </Col>\r\n                            <Col> <FormGroup>\r\n                                 <Label for=\"assayDate\" className={classes.label}>Assay Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"assayDate\"\r\n                                     id=\"assayDate\"\r\n                                     placeholder=\"Assay Date\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                          </Row>\r\n                        <Row>\r\n                          <Col>\r\n                             <FormGroup>\r\n                                 <Label for=\"approvalDate\" className={classes.label}>Approval Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"approvalDate\"\r\n                                     id=\"approvalDate\"\r\n                                     placeholder=\"Approval Date\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"pcrLabSampleNumber\" className={classes.label}>Pcr Lab Sample No *</Label>\r\n\r\n                             <Input\r\n                                 type=\"text\"\r\n                                 name=\"pcrLabSampleNumber\"\r\n                                 id=\"pcrLabSampleNumber\"\r\n                                 placeholder=\"Pcr Lab Sample Number\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"resultDate\" className={classes.label}>Result Date *</Label>\r\n\r\n                             <Input\r\n                                 type=\"date\"\r\n                                 name=\"resultDate\"\r\n                                 id=\"resultDate\"\r\n                                 placeholder=\"result Date\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"testResult\" className={classes.label}>Test result *</Label>\r\n\r\n                             <Input\r\n                                 type=\"text\"\r\n                                 name=\"testResult\"\r\n                                 id=\"testResult\"\r\n                                 placeholder=\"Test result\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col style={{textAlign: 'right'}}>\r\n                                <Button variant=\"contained\" color=\"error\"\r\n                                   startIcon={<DeleteIcon />} onClick={ e => removeField(i, e)} >\r\n                                 Remove PCR Sample\r\n                               </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <hr />\r\n                    </>\r\n                    ))\r\n               }\r\n               { permissions.includes(\"all_permission\") ? <Button variant=\"contained\" color=\"secondary\"\r\n                      startIcon={<AddIcon />} onClick={addField}>\r\n                    Add More\r\n                  </Button> : \" \"}\r\n                  {\" \"}\r\n\r\n                { permissions.includes(\"all_permission\") ? <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                   startIcon={<SaveIcon />} onClick={handleSubmit} >\r\n                 Save Result\r\n               </Button> : \" \"}\r\n           </Form>\r\n\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddResult;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { connect } from \"react-redux\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport {token, url } from \"../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst ConfigModal = (props) => {\r\n    const {manifestsId} = props;\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles()\r\n    const [saved, setSaved] = useState(false);\r\n    const [loading, setLoading] = useState(false)\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [config, setConfig] = useState({\r\n        config: \"\"\r\n    });\r\n\r\n    const [saveButtonStatus, setSaveButtonStatus] = useState(false);\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [logins, setLogins] = useState([])\r\n\r\n    const [configId, setConfigId] = useState(0);\r\n\r\n    const loadResults = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}lims/configs`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //console.log(\"configs\", response);\r\n            setLogins(response.data)\r\n            setLoading(false)\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching config details\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n    const handleChange = (event) => {\r\n       const { name, value } = event.target\r\n       setConfigId(parseInt(value));\r\n       //setConfig({ ...config, [name]: value})\r\n       //console.log(\"config\",config)\r\n     }\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault();\r\n         console.log(configId)\r\n         setSaved(true);\r\n    };\r\n\r\n    const sendManifest = async (e) => {\r\n        e.preventDefault()\r\n        console.log(\"sending manifest\")\r\n        props.togglestatus();\r\n         await axios.get(`${url}lims/ready-manifests/${manifestsId}/${configId}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            .then((resp) => {\r\n                console.log(\"sending manifest\", resp)\r\n                //setSend(true)\r\n                toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n\r\n//                if (resp.data.errors.length > 0) {\r\n//                    toast.error(resp.data.errors[0].reasons, {\r\n//                        position: toast.POSITION.TOP_RIGHT\r\n//                     });\r\n//                     setSend(true)\r\n//                }\r\n//                else {\r\n//                     toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n//                        position: toast.POSITION.TOP_RIGHT\r\n//                    });\r\n//                    setSend(true)\r\n//                    setStatus(\"Manifest Sent\");\r\n//                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>Select PCR Server </ModalHeader>\r\n                            <ModalBody>\r\n                                 <Row>\r\n                                    <Col>\r\n                                        <FormGroup>\r\n                                           <Label for=\"configName\" className={classes.label}>Configuration Setting</Label>\r\n                                           <Input\r\n                                               type=\"select\"\r\n                                               name=\"config\"\r\n                                               id=\"config\"\r\n                                               className={classes.input}\r\n                                               onChange={handleChange}\r\n                                           >\r\n                                            <option hidden>\r\n                                                Which server are you sending to?\r\n                                            </option>\r\n                                            { logins && logins.map((data, i) => (\r\n                                                <option key={i} value={data.id}>\r\n                                                    {data.configName}\r\n                                                </option>\r\n                                            ))}\r\n                                           </Input>\r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                    <Col></Col>\r\n                                </Row>\r\n\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    disabled={loading}\r\n                                >\r\n                                    Save\r\n                                </MatButton>\r\n\r\n                                {\" \"}\r\n                                <MatButton variant=\"contained\" color=\"secondary\" startIcon={<SendIcon />}\r\n                                type=\"submit\" onClick={sendManifest} disabled={saved ? false : true}>\r\n                                  Send\r\n                                </MatButton>\r\n\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfigModal;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResultModal.js",["314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339"],"import React, { useState, useEffect } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport {format} from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { connect } from \"react-redux\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport {token, url } from \"../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst AddResultModal = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles()\r\n    const { manifestObj} = props\r\n\r\n    const sampleIDs = []\r\n    manifestObj.sampleInformation.map((e) => {\r\n        sampleIDs.push(e.sampleID)\r\n    })\r\n\r\n    const [results, setResults] = useState({\r\n             manifestID: manifestObj.manifestID,\r\n             receivingFacilityID: manifestObj.receivingLabID,\r\n             receivingFacilityName: manifestObj.receivingLabName,\r\n             sendingPCRLabID: manifestObj.sendingFacilityID,\r\n             sendingPCRLabName: manifestObj.sendingFacilityName,\r\n             testType: \"Viral Load\",\r\n             samples: []\r\n        })\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [samples, setSamples] = useState({});\r\n    const [optionsample, setOptionsample] = useState([]);\r\n    const [saveButtonStatus, setSaveButtonStatus] = useState(false);\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [inputFields, setInputFields] = useState({\r\n            dateResultDispatched: \"\",\r\n            dateSampleReceivedAtPcrLab: \"\",\r\n            testResult: \"\",\r\n            resultDate: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            approvalDate: \"\",\r\n            assayDate: \"\",\r\n            sampleTestable: \"\",\r\n            sampleStatus: \"\",\r\n            sampleID: \"\",\r\n            uuid: \"\",\r\n            visitDate: format(new Date(), 'yyyy-MM-dd'),\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n           const { name, value } = event.target\r\n           setInputFields({ ...inputFields, [name]: value})\r\n     }\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault();\r\n\r\n         try {\r\n             console.log(inputFields)\r\n\r\n              await axios.post(`${url}lims/results`, inputFields,\r\n                 { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                     console.log(\"results\", resp)\r\n\r\n                     toast.success(\"PCR Sample results added successfully!!\", {\r\n                         position: toast.POSITION.TOP_RIGHT\r\n                     });\r\n\r\n                      setInputFields({\r\n                          dateResultDispatched: \"\",\r\n                          dateSampleReceivedAtPcrLab: \"\",\r\n                          testResult: \"\",\r\n                          resultDate: \"\",\r\n                          pcrLabSampleNumber: \"\",\r\n                          approvalDate: \"\",\r\n                          assayDate: \"\",\r\n                          sampleTestable: \"\",\r\n                          sampleStatus: \"\",\r\n                          sampleID: \"\",\r\n                          uuid: \"\",\r\n                          visitDate: format(new Date(), 'yyyy-MM-dd'),\r\n                      })\r\n                 });\r\n             //history.push(\"/\");\r\n         } catch (e) {\r\n            toast.error(\"An error occurred while adding PCR Sample results\", {\r\n                 position: toast.POSITION.TOP_RIGHT\r\n             });\r\n         }\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>Add PCR Sample Results </ModalHeader>\r\n                            <ModalBody>\r\n                                 <Row>\r\n                                        <Col><FormGroup>\r\n                                            <Label for=\"dateResultDispatched\" className={classes.label}>Date Result Dispatched *</Label>\r\n\r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"dateResultDispatched\"\r\n                                                id=\"dateResultDispatched\"\r\n                                                className={classes.input}\r\n                                                onChange={handleChange}\r\n                                                value={inputFields.dateResultDispatched}\r\n                                            />\r\n                                        </FormGroup></Col>\r\n                                       <Col><FormGroup>\r\n                                        <Label for=\"dateSampleReceivedAtPcrLab\" className={classes.label}>Date Sample Received at PCR Lab *</Label>\r\n\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateSampleReceivedAtPcrLab\"\r\n                                            id=\"dateSampleReceivedAtPcrLab\"\r\n                                            className={classes.input}\r\n                                            onChange={handleChange}\r\n                                            value={inputFields.dateSampleReceivedAtPcrLab}\r\n                                        />\r\n                                    </FormGroup></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                            <Label for=\"sampleID\" className={classes.label}>Sample ID *</Label>\r\n                                            <Input\r\n                                                type=\"select\"\r\n                                                name=\"sampleID\"\r\n                                                id=\"sampleID\"\r\n                                                className={classes.input}\r\n                                                onChange={ e => handleChange(e)}\r\n                                                value={inputFields.sampleID}\r\n                                            >\r\n                                             <option hidden>\r\n                                                 Select Sample Id\r\n                                             </option>\r\n                                             { sampleIDs && sampleIDs.map((sample, i) =>\r\n                                             <option key={i} value={sample} >{sample}</option>)}\r\n                                            </Input>\r\n                                        </FormGroup>\r\n                                     </Col>\r\n                                    <Col>\r\n                                       <FormGroup>\r\n                                             <Label for=\"sampleStatus\" className={classes.label}>Sample Status *</Label>\r\n                                             <Input\r\n                                                 type=\"select\"\r\n                                                 name=\"sampleStatus\"\r\n                                                 id=\"sampleStatus\"\r\n                                                 className={classes.input}\r\n                                                 onChange={ e => handleChange(e)}\r\n                                                 value={inputFields.sampleStatus}\r\n                                             >\r\n                                              <option hidden>\r\n                                                  Select Sample status\r\n                                              </option>\r\n                                              <option value=\"1\" >Completed</option>\r\n                                              <option value=\"2\" >Rejected</option>\r\n                                              <option value=\"3\" >In-Progress</option>\r\n                                              <option value=\"4\" >Re-run</option>\r\n                                             </Input>\r\n                                         </FormGroup>\r\n                                      </Col>\r\n                                  </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                    <FormGroup>\r\n                                          <Label for=\"surName\" className={classes.label}>Sample Testable *</Label>\r\n                                          <Input\r\n                                              type=\"select\"\r\n                                              name=\"sampleTestable\"\r\n                                              id=\"sampleTestable\"\r\n                                              className={classes.input}\r\n                                              onChange={ e => handleChange(e)}\r\n                                              value={inputFields.sampleTestable}\r\n                                          >\r\n                                           <option hidden>\r\n                                               Is Sample Testable ?\r\n                                           </option>\r\n                                           <option value=\"true\" >True</option>\r\n                                           <option value=\"false\" >False</option>\r\n                                          </Input>\r\n                                      </FormGroup>\r\n                                   </Col>\r\n                                    <Col> <FormGroup>\r\n                                         <Label for=\"assayDate\" className={classes.label}>Assay Date *</Label>\r\n\r\n                                         <Input\r\n                                             type=\"date\"\r\n                                             name=\"assayDate\"\r\n                                             id=\"assayDate\"\r\n                                             placeholder=\"Assay Date\"\r\n                                             className={classes.input}\r\n                                             onChange={handleChange}\r\n                                             value={inputFields.assayDate}\r\n                                         />\r\n                                     </FormGroup></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col>\r\n                                     <FormGroup>\r\n                                         <Label for=\"approvalDate\" className={classes.label}>Approval Date *</Label>\r\n\r\n                                         <Input\r\n                                             type=\"date\"\r\n                                             name=\"approvalDate\"\r\n                                             id=\"approvalDate\"\r\n                                             placeholder=\"Approval Date\"\r\n                                             className={classes.input}\r\n                                             onChange={handleChange}\r\n                                             value={inputFields.approvalDate}\r\n                                         />\r\n                                     </FormGroup></Col>\r\n                                  <Col><FormGroup>\r\n                                     <Label for=\"pcrLabSampleNumber\" className={classes.label}>Pcr Lab Sample No *</Label>\r\n\r\n                                     <Input\r\n                                         type=\"text\"\r\n                                         name=\"pcrLabSampleNumber\"\r\n                                         id=\"pcrLabSampleNumber\"\r\n                                         placeholder=\"Pcr Lab Sample Number\"\r\n                                         className={classes.input}\r\n                                         onChange={handleChange}\r\n                                         value={inputFields.pcrLabSampleNumber}\r\n                                     />\r\n                                 </FormGroup></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                        <Col><FormGroup>\r\n                                            <Label for=\"resultDate\" className={classes.label}>Result Date *</Label>\r\n\r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"resultDate\"\r\n                                                id=\"resultDate\"\r\n                                                placeholder=\"result Date\"\r\n                                                className={classes.input}\r\n                                                onChange={handleChange}\r\n                                                value={inputFields.resultDate}\r\n                                            />\r\n                                        </FormGroup></Col>\r\n                                       <Col><FormGroup>\r\n                                        <Label for=\"testResult\" className={classes.label}>Test result *</Label>\r\n\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"testResult\"\r\n                                            id=\"testResult\"\r\n                                            placeholder=\"Test result\"\r\n                                            className={classes.input}\r\n                                            onChange={handleChange}\r\n                                            value={inputFields.testResult}\r\n                                        />\r\n                                    </FormGroup></Col>\r\n                                </Row>\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    disabled={loading}\r\n                                >\r\n                                    Save\r\n                                </MatButton>\r\n\r\n                                <MatButton\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    onClick={props.togglestatus}\r\n                                    className={classes.button}\r\n                                    startIcon={<CancelIcon />}\r\n                                >\r\n                                    Cancel\r\n                                </MatButton>\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddResultModal;","C:\\Program Files\\test\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintResults.js",["340","341","342","343","344","345","346","347","348","349","350","351","352","353"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Badge, Spinner } from 'reactstrap';\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Input,\r\n    FormGroup,\r\n    Label,Card, CardBody, Table\r\n} from 'reactstrap';\r\n\r\nlet today = new Date().toLocaleDateString('en-us', { weekday:\"long\", year:\"numeric\", month:\"short\", day:\"numeric\"})\r\n\r\n\r\nclass PrintResults extends React.Component {\r\n\r\n  render() {\r\n    const { manifestObj } = this.props;\r\n    //console.log(manifestObj)\r\n    return (\r\n             <Card>\r\n              <CardBody>\r\n                <h3 style={{ textAlign: 'center'}}>NISRN SAMPLE RESULTS</h3>\r\n                <hr/>\r\n                <Row>\r\n                <Table bordered size=\"sm\" responsive>\r\n                   <tbody>\r\n                        <tr>\r\n                           <th scope=\"row\">ManifestID:</th>\r\n                           <td>{manifestObj.manifestID}</td>\r\n                           <th scope=\"row\">Facility Name:</th>\r\n                           <td>{manifestObj.sendingFacilityName}</td>\r\n                           <th scope=\"row\">Facility Id:</th>\r\n                           <td>{manifestObj.sendingFacilityID}</td>\r\n                         </tr>\r\n\r\n                          <tr>\r\n                           <th scope=\"row\">Test Type:</th>\r\n                           <td>{<p><Badge  color=\"primary\">Viral Load</Badge></p>}</td>\r\n                           <th scope=\"row\">Receiving Lab Name:</th>\r\n                           <td>{manifestObj.receivingLabName}</td>\r\n                           <th scope=\"row\">Receiving Lab Number:</th>\r\n                           <td>{manifestObj.receivingLabID}</td>\r\n                         </tr>\r\n                   </tbody>\r\n                 </Table>\r\n                  <br/>\r\n                    <Table striped bordered size=\"sm\">\r\n                     <tbody>\r\n                               <tr style={{  backgroundColor:'#014d88', color:'#fff' }}>\r\n                                <th>Sample ID</th>\r\n                                <th>Approval Date</th>\r\n                                {/*<th>Assay Date</th>\r\n                                <th>Date Received at PCR Lab</th>*/}\r\n                                <th>Date Result Dispatched</th>\r\n                                <th>PCR Sample Number</th>\r\n                                 {/*<th>Result Date</th>*/}\r\n                                <th>Sample Status</th>\r\n                                <th>Sample Testable</th>\r\n                                <th>Test Result</th>\r\n                                 {/*<th>Visit Date</th>*/}\r\n                              </tr>\r\n                               <tr>\r\n                                  <td>0005</td>\r\n                                  <td scope=\"row\">--:--:--</td>\r\n                                    {/*<td>{data.assayDate}</td>\r\n                                  <td>{data.dateSampleReceivedAtPCRLab}</td>*/}\r\n                                  <td>--:--:--</td>\r\n                                  <td>----</td>\r\n                                   {/*<td>{data.resultDate}</td>*/}\r\n\r\n                                  <td><p><Badge  color=\"dark\">Result Pending</Badge></p></td>\r\n                                  <td>True</td>\r\n                                  <td>Not Ready</td>\r\n                                   {/*<td>{data.visitDate}</td>*/}\r\n                               </tr>\r\n                     </tbody>\r\n                   </Table>\r\n                   <span>LAMISPlus 2.0: {today}</span>\r\n                 </Row>\r\n                 <hr />\r\n              </CardBody>\r\n             </Card>\r\n      );\r\n  }\r\n}\r\n\r\nexport default PrintResults;",{"ruleId":"354","severity":1,"message":"355","line":4,"column":41,"nodeType":"356","messageId":"357","endLine":4,"endColumn":47},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"354","severity":1,"message":"362","line":16,"column":8,"nodeType":"356","messageId":"357","endLine":16,"endColumn":20},{"ruleId":"354","severity":1,"message":"363","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":20},{"ruleId":"354","severity":1,"message":"364","line":6,"column":9,"nodeType":"356","messageId":"357","endLine":6,"endColumn":15},{"ruleId":"365","severity":1,"message":"366","line":67,"column":69,"nodeType":"367","messageId":"368","endLine":67,"endColumn":71},{"ruleId":"365","severity":1,"message":"366","line":67,"column":111,"nodeType":"367","messageId":"368","endLine":67,"endColumn":113},{"ruleId":"365","severity":1,"message":"366","line":73,"column":71,"nodeType":"367","messageId":"368","endLine":73,"endColumn":73},{"ruleId":"365","severity":1,"message":"366","line":73,"column":113,"nodeType":"367","messageId":"368","endLine":73,"endColumn":115},{"ruleId":"354","severity":1,"message":"369","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":38},{"ruleId":"354","severity":1,"message":"370","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":11},{"ruleId":"354","severity":1,"message":"371","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":18},{"ruleId":"372","severity":1,"message":"373","line":88,"column":49,"nodeType":"374","messageId":"375","endLine":88,"endColumn":51},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"377","line":3,"column":10,"nodeType":"356","messageId":"357","endLine":3,"endColumn":14},{"ruleId":"354","severity":1,"message":"378","line":4,"column":10,"nodeType":"356","messageId":"357","endLine":4,"endColumn":17},{"ruleId":"354","severity":1,"message":"379","line":5,"column":10,"nodeType":"356","messageId":"357","endLine":5,"endColumn":13},{"ruleId":"354","severity":1,"message":"380","line":5,"column":15,"nodeType":"356","messageId":"357","endLine":5,"endColumn":18},{"ruleId":"354","severity":1,"message":"381","line":6,"column":9,"nodeType":"356","messageId":"357","endLine":6,"endColumn":14},{"ruleId":"354","severity":1,"message":"382","line":6,"column":16,"nodeType":"356","messageId":"357","endLine":6,"endColumn":21},{"ruleId":"354","severity":1,"message":"383","line":6,"column":23,"nodeType":"356","messageId":"357","endLine":6,"endColumn":32},{"ruleId":"354","severity":1,"message":"384","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":10,"column":8,"nodeType":"356","messageId":"357","endLine":10,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":11,"column":8,"nodeType":"356","messageId":"357","endLine":11,"endColumn":18},{"ruleId":"354","severity":1,"message":"387","line":25,"column":8,"nodeType":"356","messageId":"357","endLine":25,"endColumn":14},{"ruleId":"354","severity":1,"message":"388","line":26,"column":8,"nodeType":"356","messageId":"357","endLine":26,"endColumn":13},{"ruleId":"354","severity":1,"message":"389","line":123,"column":11,"nodeType":"356","messageId":"357","endLine":123,"endColumn":18},{"ruleId":"354","severity":1,"message":"390","line":137,"column":11,"nodeType":"356","messageId":"357","endLine":137,"endColumn":23},{"ruleId":"354","severity":1,"message":"391","line":160,"column":16,"nodeType":"356","messageId":"357","endLine":160,"endColumn":25},{"ruleId":"354","severity":1,"message":"392","line":163,"column":16,"nodeType":"356","messageId":"357","endLine":163,"endColumn":23},{"ruleId":"393","severity":1,"message":"394","line":196,"column":23,"nodeType":"395","messageId":"375","endLine":196,"endColumn":26},{"ruleId":"354","severity":1,"message":"369","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":38},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"378","line":4,"column":10,"nodeType":"356","messageId":"357","endLine":4,"endColumn":17},{"ruleId":"354","severity":1,"message":"379","line":5,"column":10,"nodeType":"356","messageId":"357","endLine":5,"endColumn":13},{"ruleId":"354","severity":1,"message":"380","line":5,"column":15,"nodeType":"356","messageId":"357","endLine":5,"endColumn":18},{"ruleId":"354","severity":1,"message":"384","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":10,"column":8,"nodeType":"356","messageId":"357","endLine":10,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":11,"column":8,"nodeType":"356","messageId":"357","endLine":11,"endColumn":18},{"ruleId":"354","severity":1,"message":"396","line":13,"column":10,"nodeType":"356","messageId":"357","endLine":13,"endColumn":20},{"ruleId":"354","severity":1,"message":"387","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":14},{"ruleId":"354","severity":1,"message":"388","line":19,"column":8,"nodeType":"356","messageId":"357","endLine":19,"endColumn":13},{"ruleId":"354","severity":1,"message":"397","line":91,"column":12,"nodeType":"356","messageId":"357","endLine":91,"endColumn":19},{"ruleId":"354","severity":1,"message":"398","line":91,"column":21,"nodeType":"356","messageId":"357","endLine":91,"endColumn":31},{"ruleId":"354","severity":1,"message":"399","line":92,"column":12,"nodeType":"356","messageId":"357","endLine":92,"endColumn":28},{"ruleId":"354","severity":1,"message":"400","line":92,"column":30,"nodeType":"356","messageId":"357","endLine":92,"endColumn":49},{"ruleId":"354","severity":1,"message":"401","line":93,"column":11,"nodeType":"356","messageId":"357","endLine":93,"endColumn":23},{"ruleId":"354","severity":1,"message":"402","line":94,"column":12,"nodeType":"356","messageId":"357","endLine":94,"endColumn":17},{"ruleId":"354","severity":1,"message":"403","line":94,"column":19,"nodeType":"356","messageId":"357","endLine":94,"endColumn":27},{"ruleId":"404","severity":1,"message":"405","line":111,"column":8,"nodeType":"406","endLine":111,"endColumn":10,"suggestions":"407"},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"377","line":4,"column":10,"nodeType":"356","messageId":"357","endLine":4,"endColumn":14},{"ruleId":"354","severity":1,"message":"408","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":17},{"ruleId":"354","severity":1,"message":"409","line":7,"column":10,"nodeType":"356","messageId":"357","endLine":7,"endColumn":21},{"ruleId":"354","severity":1,"message":"410","line":7,"column":23,"nodeType":"356","messageId":"357","endLine":7,"endColumn":38},{"ruleId":"354","severity":1,"message":"411","line":7,"column":52,"nodeType":"356","messageId":"357","endLine":7,"endColumn":60},{"ruleId":"354","severity":1,"message":"412","line":8,"column":9,"nodeType":"356","messageId":"357","endLine":8,"endColumn":13},{"ruleId":"354","severity":1,"message":"413","line":8,"column":14,"nodeType":"356","messageId":"357","endLine":8,"endColumn":22},{"ruleId":"354","severity":1,"message":"414","line":8,"column":23,"nodeType":"356","messageId":"357","endLine":8,"endColumn":33},{"ruleId":"354","severity":1,"message":"415","line":8,"column":34,"nodeType":"356","messageId":"357","endLine":8,"endColumn":42},{"ruleId":"354","severity":1,"message":"416","line":9,"column":10,"nodeType":"356","messageId":"357","endLine":9,"endColumn":15},{"ruleId":"354","severity":1,"message":"417","line":12,"column":11,"nodeType":"356","messageId":"357","endLine":12,"endColumn":16},{"ruleId":"354","severity":1,"message":"418","line":12,"column":18,"nodeType":"356","messageId":"357","endLine":12,"endColumn":29},{"ruleId":"354","severity":1,"message":"419","line":12,"column":31,"nodeType":"356","messageId":"357","endLine":12,"endColumn":40},{"ruleId":"354","severity":1,"message":"380","line":13,"column":5,"nodeType":"356","messageId":"357","endLine":13,"endColumn":8},{"ruleId":"354","severity":1,"message":"382","line":13,"column":9,"nodeType":"356","messageId":"357","endLine":13,"endColumn":14},{"ruleId":"354","severity":1,"message":"383","line":14,"column":5,"nodeType":"356","messageId":"357","endLine":14,"endColumn":14},{"ruleId":"354","severity":1,"message":"381","line":15,"column":5,"nodeType":"356","messageId":"357","endLine":15,"endColumn":10},{"ruleId":"354","severity":1,"message":"420","line":15,"column":11,"nodeType":"356","messageId":"357","endLine":15,"endColumn":15},{"ruleId":"354","severity":1,"message":"421","line":15,"column":17,"nodeType":"356","messageId":"357","endLine":15,"endColumn":25},{"ruleId":"354","severity":1,"message":"422","line":15,"column":27,"nodeType":"356","messageId":"357","endLine":15,"endColumn":32},{"ruleId":"354","severity":1,"message":"384","line":19,"column":8,"nodeType":"356","messageId":"357","endLine":19,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":20,"column":8,"nodeType":"356","messageId":"357","endLine":20,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":21,"column":8,"nodeType":"356","messageId":"357","endLine":21,"endColumn":18},{"ruleId":"354","severity":1,"message":"423","line":22,"column":8,"nodeType":"356","messageId":"357","endLine":22,"endColumn":16},{"ruleId":"354","severity":1,"message":"424","line":23,"column":8,"nodeType":"356","messageId":"357","endLine":23,"endColumn":18},{"ruleId":"354","severity":1,"message":"425","line":24,"column":8,"nodeType":"356","messageId":"357","endLine":24,"endColumn":24},{"ruleId":"354","severity":1,"message":"387","line":31,"column":8,"nodeType":"356","messageId":"357","endLine":31,"endColumn":14},{"ruleId":"354","severity":1,"message":"388","line":32,"column":8,"nodeType":"356","messageId":"357","endLine":32,"endColumn":13},{"ruleId":"354","severity":1,"message":"426","line":34,"column":16,"nodeType":"356","messageId":"357","endLine":34,"endColumn":26},{"ruleId":"354","severity":1,"message":"389","line":117,"column":11,"nodeType":"356","messageId":"357","endLine":117,"endColumn":18},{"ruleId":"365","severity":1,"message":"366","line":164,"column":54,"nodeType":"367","messageId":"368","endLine":164,"endColumn":56},{"ruleId":"365","severity":1,"message":"366","line":164,"column":96,"nodeType":"367","messageId":"368","endLine":164,"endColumn":98},{"ruleId":"365","severity":1,"message":"366","line":187,"column":56,"nodeType":"367","messageId":"368","endLine":187,"endColumn":58},{"ruleId":"365","severity":1,"message":"366","line":187,"column":98,"nodeType":"367","messageId":"368","endLine":187,"endColumn":100},{"ruleId":"365","severity":1,"message":"366","line":198,"column":55,"nodeType":"367","messageId":"368","endLine":198,"endColumn":57},{"ruleId":"365","severity":1,"message":"366","line":198,"column":97,"nodeType":"367","messageId":"368","endLine":198,"endColumn":99},{"ruleId":"354","severity":1,"message":"369","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":38},{"ruleId":"354","severity":1,"message":"377","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"378","line":3,"column":10,"nodeType":"356","messageId":"357","endLine":3,"endColumn":17},{"ruleId":"354","severity":1,"message":"386","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":18},{"ruleId":"354","severity":1,"message":"417","line":9,"column":11,"nodeType":"356","messageId":"357","endLine":9,"endColumn":16},{"ruleId":"354","severity":1,"message":"418","line":9,"column":18,"nodeType":"356","messageId":"357","endLine":9,"endColumn":29},{"ruleId":"354","severity":1,"message":"419","line":9,"column":31,"nodeType":"356","messageId":"357","endLine":9,"endColumn":40},{"ruleId":"354","severity":1,"message":"422","line":10,"column":26,"nodeType":"356","messageId":"357","endLine":10,"endColumn":31},{"ruleId":"354","severity":1,"message":"427","line":11,"column":11,"nodeType":"356","messageId":"357","endLine":11,"endColumn":23},{"ruleId":"354","severity":1,"message":"428","line":13,"column":12,"nodeType":"356","messageId":"357","endLine":13,"endColumn":17},{"ruleId":"354","severity":1,"message":"388","line":20,"column":8,"nodeType":"356","messageId":"357","endLine":20,"endColumn":13},{"ruleId":"354","severity":1,"message":"429","line":23,"column":8,"nodeType":"356","messageId":"357","endLine":23,"endColumn":16},{"ruleId":"354","severity":1,"message":"397","line":85,"column":12,"nodeType":"356","messageId":"357","endLine":85,"endColumn":19},{"ruleId":"354","severity":1,"message":"398","line":85,"column":21,"nodeType":"356","messageId":"357","endLine":85,"endColumn":31},{"ruleId":"354","severity":1,"message":"399","line":86,"column":12,"nodeType":"356","messageId":"357","endLine":86,"endColumn":28},{"ruleId":"354","severity":1,"message":"400","line":86,"column":30,"nodeType":"356","messageId":"357","endLine":86,"endColumn":49},{"ruleId":"354","severity":1,"message":"430","line":87,"column":11,"nodeType":"356","messageId":"357","endLine":87,"endColumn":18},{"ruleId":"354","severity":1,"message":"431","line":89,"column":12,"nodeType":"356","messageId":"357","endLine":89,"endColumn":16},{"ruleId":"354","severity":1,"message":"432","line":89,"column":18,"nodeType":"356","messageId":"357","endLine":89,"endColumn":25},{"ruleId":"354","severity":1,"message":"433","line":92,"column":20,"nodeType":"356","messageId":"357","endLine":92,"endColumn":29},{"ruleId":"434","severity":1,"message":"435","line":146,"column":29,"nodeType":"436","messageId":"437","endLine":146,"endColumn":31},{"ruleId":"354","severity":1,"message":"438","line":1,"column":16,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"354","severity":1,"message":"369","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":38},{"ruleId":"354","severity":1,"message":"439","line":1,"column":40,"nodeType":"356","messageId":"357","endLine":1,"endColumn":48},{"ruleId":"354","severity":1,"message":"377","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"440","line":2,"column":16,"nodeType":"356","messageId":"357","endLine":2,"endColumn":26},{"ruleId":"354","severity":1,"message":"417","line":5,"column":11,"nodeType":"356","messageId":"357","endLine":5,"endColumn":16},{"ruleId":"354","severity":1,"message":"418","line":5,"column":18,"nodeType":"356","messageId":"357","endLine":5,"endColumn":29},{"ruleId":"354","severity":1,"message":"419","line":5,"column":31,"nodeType":"356","messageId":"357","endLine":5,"endColumn":40},{"ruleId":"354","severity":1,"message":"380","line":6,"column":10,"nodeType":"356","messageId":"357","endLine":6,"endColumn":13},{"ruleId":"354","severity":1,"message":"382","line":6,"column":14,"nodeType":"356","messageId":"357","endLine":6,"endColumn":19},{"ruleId":"354","severity":1,"message":"383","line":7,"column":5,"nodeType":"356","messageId":"357","endLine":7,"endColumn":14},{"ruleId":"354","severity":1,"message":"381","line":8,"column":5,"nodeType":"356","messageId":"357","endLine":8,"endColumn":10},{"ruleId":"441","severity":1,"message":"442","line":29,"column":37,"nodeType":"443","endLine":29,"endColumn":94},{"ruleId":"444","severity":1,"message":"445","line":91,"column":41,"nodeType":"446","endLine":91,"endColumn":52},{"ruleId":"354","severity":1,"message":"447","line":4,"column":8,"nodeType":"356","messageId":"357","endLine":4,"endColumn":25},{"ruleId":"354","severity":1,"message":"384","line":11,"column":8,"nodeType":"356","messageId":"357","endLine":11,"endColumn":22},{"ruleId":"354","severity":1,"message":"448","line":12,"column":8,"nodeType":"356","messageId":"357","endLine":12,"endColumn":20},{"ruleId":"354","severity":1,"message":"449","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":20},{"ruleId":"354","severity":1,"message":"450","line":14,"column":8,"nodeType":"356","messageId":"357","endLine":14,"endColumn":18},{"ruleId":"354","severity":1,"message":"451","line":16,"column":9,"nodeType":"356","messageId":"357","endLine":16,"endColumn":14},{"ruleId":"354","severity":1,"message":"452","line":30,"column":27,"nodeType":"356","messageId":"357","endLine":30,"endColumn":43},{"ruleId":"354","severity":1,"message":"453","line":36,"column":11,"nodeType":"356","messageId":"357","endLine":36,"endColumn":30},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"379","line":4,"column":10,"nodeType":"356","messageId":"357","endLine":4,"endColumn":13},{"ruleId":"354","severity":1,"message":"380","line":4,"column":15,"nodeType":"356","messageId":"357","endLine":4,"endColumn":18},{"ruleId":"354","severity":1,"message":"422","line":4,"column":26,"nodeType":"356","messageId":"357","endLine":4,"endColumn":31},{"ruleId":"354","severity":1,"message":"454","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":21},{"ruleId":"354","severity":1,"message":"455","line":8,"column":17,"nodeType":"356","messageId":"357","endLine":8,"endColumn":24},{"ruleId":"354","severity":1,"message":"384","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":14,"column":8,"nodeType":"356","messageId":"357","endLine":14,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":15,"column":8,"nodeType":"356","messageId":"357","endLine":15,"endColumn":18},{"ruleId":"354","severity":1,"message":"387","line":22,"column":8,"nodeType":"356","messageId":"357","endLine":22,"endColumn":14},{"ruleId":"354","severity":1,"message":"388","line":23,"column":8,"nodeType":"356","messageId":"357","endLine":23,"endColumn":13},{"ruleId":"354","severity":1,"message":"456","line":104,"column":7,"nodeType":"356","messageId":"357","endLine":104,"endColumn":17},{"ruleId":"354","severity":1,"message":"457","line":128,"column":11,"nodeType":"356","messageId":"357","endLine":128,"endColumn":22},{"ruleId":"354","severity":1,"message":"397","line":131,"column":12,"nodeType":"356","messageId":"357","endLine":131,"endColumn":19},{"ruleId":"354","severity":1,"message":"458","line":132,"column":12,"nodeType":"356","messageId":"357","endLine":132,"endColumn":19},{"ruleId":"354","severity":1,"message":"459","line":132,"column":21,"nodeType":"356","messageId":"357","endLine":132,"endColumn":31},{"ruleId":"404","severity":1,"message":"460","line":156,"column":8,"nodeType":"406","endLine":156,"endColumn":10,"suggestions":"461"},{"ruleId":"354","severity":1,"message":"462","line":162,"column":11,"nodeType":"356","messageId":"357","endLine":162,"endColumn":23},{"ruleId":"354","severity":1,"message":"463","line":176,"column":11,"nodeType":"356","messageId":"357","endLine":176,"endColumn":25},{"ruleId":"354","severity":1,"message":"464","line":1,"column":50,"nodeType":"356","messageId":"357","endLine":1,"endColumn":56},{"ruleId":"354","severity":1,"message":"396","line":1,"column":58,"nodeType":"356","messageId":"357","endLine":1,"endColumn":68},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"422","line":4,"column":26,"nodeType":"356","messageId":"357","endLine":4,"endColumn":31},{"ruleId":"354","severity":1,"message":"454","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":21},{"ruleId":"354","severity":1,"message":"421","line":11,"column":10,"nodeType":"356","messageId":"357","endLine":11,"endColumn":18},{"ruleId":"354","severity":1,"message":"427","line":12,"column":11,"nodeType":"356","messageId":"357","endLine":12,"endColumn":23},{"ruleId":"354","severity":1,"message":"465","line":12,"column":36,"nodeType":"356","messageId":"357","endLine":12,"endColumn":44},{"ruleId":"354","severity":1,"message":"428","line":14,"column":12,"nodeType":"356","messageId":"357","endLine":14,"endColumn":17},{"ruleId":"354","severity":1,"message":"384","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":19,"column":8,"nodeType":"356","messageId":"357","endLine":19,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":20,"column":8,"nodeType":"356","messageId":"357","endLine":20,"endColumn":18},{"ruleId":"354","severity":1,"message":"466","line":24,"column":8,"nodeType":"356","messageId":"357","endLine":24,"endColumn":13},{"ruleId":"354","severity":1,"message":"467","line":26,"column":9,"nodeType":"356","messageId":"357","endLine":26,"endColumn":14},{"ruleId":"354","severity":1,"message":"468","line":26,"column":16,"nodeType":"356","messageId":"357","endLine":26,"endColumn":19},{"ruleId":"354","severity":1,"message":"388","line":29,"column":8,"nodeType":"356","messageId":"357","endLine":29,"endColumn":13},{"ruleId":"434","severity":1,"message":"435","line":95,"column":43,"nodeType":"436","messageId":"437","endLine":95,"endColumn":45},{"ruleId":"354","severity":1,"message":"397","line":102,"column":12,"nodeType":"356","messageId":"357","endLine":102,"endColumn":19},{"ruleId":"354","severity":1,"message":"469","line":143,"column":11,"nodeType":"356","messageId":"357","endLine":143,"endColumn":25},{"ruleId":"354","severity":1,"message":"464","line":1,"column":50,"nodeType":"356","messageId":"357","endLine":1,"endColumn":56},{"ruleId":"354","severity":1,"message":"396","line":1,"column":58,"nodeType":"356","messageId":"357","endLine":1,"endColumn":68},{"ruleId":"354","severity":1,"message":"376","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"377","line":3,"column":10,"nodeType":"356","messageId":"357","endLine":3,"endColumn":14},{"ruleId":"354","severity":1,"message":"454","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":21},{"ruleId":"354","severity":1,"message":"408","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":17},{"ruleId":"354","severity":1,"message":"470","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":16},{"ruleId":"354","severity":1,"message":"471","line":12,"column":8,"nodeType":"356","messageId":"357","endLine":12,"endColumn":22},{"ruleId":"354","severity":1,"message":"421","line":14,"column":10,"nodeType":"356","messageId":"357","endLine":14,"endColumn":18},{"ruleId":"354","severity":1,"message":"427","line":15,"column":11,"nodeType":"356","messageId":"357","endLine":15,"endColumn":23},{"ruleId":"354","severity":1,"message":"465","line":15,"column":36,"nodeType":"356","messageId":"357","endLine":15,"endColumn":44},{"ruleId":"354","severity":1,"message":"428","line":17,"column":12,"nodeType":"356","messageId":"357","endLine":17,"endColumn":17},{"ruleId":"354","severity":1,"message":"455","line":17,"column":19,"nodeType":"356","messageId":"357","endLine":17,"endColumn":26},{"ruleId":"354","severity":1,"message":"384","line":21,"column":8,"nodeType":"356","messageId":"357","endLine":21,"endColumn":22},{"ruleId":"354","severity":1,"message":"385","line":22,"column":8,"nodeType":"356","messageId":"357","endLine":22,"endColumn":15},{"ruleId":"354","severity":1,"message":"386","line":23,"column":8,"nodeType":"356","messageId":"357","endLine":23,"endColumn":18},{"ruleId":"354","severity":1,"message":"472","line":24,"column":8,"nodeType":"356","messageId":"357","endLine":24,"endColumn":18},{"ruleId":"354","severity":1,"message":"388","line":31,"column":8,"nodeType":"356","messageId":"357","endLine":31,"endColumn":13},{"ruleId":"354","severity":1,"message":"473","line":94,"column":11,"nodeType":"356","messageId":"357","endLine":94,"endColumn":22},{"ruleId":"354","severity":1,"message":"457","line":96,"column":11,"nodeType":"356","messageId":"357","endLine":96,"endColumn":22},{"ruleId":"354","severity":1,"message":"397","line":99,"column":12,"nodeType":"356","messageId":"357","endLine":99,"endColumn":19},{"ruleId":"354","severity":1,"message":"427","line":2,"column":43,"nodeType":"356","messageId":"357","endLine":2,"endColumn":55},{"ruleId":"354","severity":1,"message":"474","line":2,"column":60,"nodeType":"356","messageId":"357","endLine":2,"endColumn":65},{"ruleId":"354","severity":1,"message":"424","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":18},{"ruleId":"354","severity":1,"message":"378","line":10,"column":10,"nodeType":"356","messageId":"357","endLine":10,"endColumn":17},{"ruleId":"354","severity":1,"message":"475","line":11,"column":8,"nodeType":"356","messageId":"357","endLine":11,"endColumn":12},{"ruleId":"354","severity":1,"message":"476","line":12,"column":8,"nodeType":"356","messageId":"357","endLine":12,"endColumn":17},{"ruleId":"354","severity":1,"message":"477","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":20},{"ruleId":"354","severity":1,"message":"478","line":16,"column":10,"nodeType":"356","messageId":"357","endLine":16,"endColumn":24},{"ruleId":"354","severity":1,"message":"479","line":17,"column":8,"nodeType":"356","messageId":"357","endLine":17,"endColumn":14},{"ruleId":"354","severity":1,"message":"480","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":23},{"ruleId":"354","severity":1,"message":"481","line":19,"column":8,"nodeType":"356","messageId":"357","endLine":19,"endColumn":14},{"ruleId":"354","severity":1,"message":"455","line":21,"column":10,"nodeType":"356","messageId":"357","endLine":21,"endColumn":17},{"ruleId":"354","severity":1,"message":"482","line":84,"column":11,"nodeType":"356","messageId":"357","endLine":84,"endColumn":18},{"ruleId":"354","severity":1,"message":"483","line":89,"column":12,"nodeType":"356","messageId":"357","endLine":89,"endColumn":19},{"ruleId":"354","severity":1,"message":"484","line":90,"column":11,"nodeType":"356","messageId":"357","endLine":90,"endColumn":20},{"ruleId":"354","severity":1,"message":"485","line":91,"column":12,"nodeType":"356","messageId":"357","endLine":91,"endColumn":18},{"ruleId":"354","severity":1,"message":"486","line":91,"column":20,"nodeType":"356","messageId":"357","endLine":91,"endColumn":29},{"ruleId":"354","severity":1,"message":"487","line":95,"column":12,"nodeType":"356","messageId":"357","endLine":95,"endColumn":28},{"ruleId":"354","severity":1,"message":"488","line":95,"column":30,"nodeType":"356","messageId":"357","endLine":95,"endColumn":49},{"ruleId":"354","severity":1,"message":"489","line":97,"column":12,"nodeType":"356","messageId":"357","endLine":97,"endColumn":18},{"ruleId":"354","severity":1,"message":"490","line":97,"column":20,"nodeType":"356","messageId":"357","endLine":97,"endColumn":29},{"ruleId":"354","severity":1,"message":"491","line":122,"column":16,"nodeType":"356","messageId":"357","endLine":122,"endColumn":20},{"ruleId":"354","severity":1,"message":"427","line":2,"column":43,"nodeType":"356","messageId":"357","endLine":2,"endColumn":55},{"ruleId":"354","severity":1,"message":"474","line":2,"column":60,"nodeType":"356","messageId":"357","endLine":2,"endColumn":65},{"ruleId":"354","severity":1,"message":"378","line":9,"column":10,"nodeType":"356","messageId":"357","endLine":9,"endColumn":17},{"ruleId":"354","severity":1,"message":"475","line":10,"column":8,"nodeType":"356","messageId":"357","endLine":10,"endColumn":12},{"ruleId":"354","severity":1,"message":"476","line":11,"column":8,"nodeType":"356","messageId":"357","endLine":11,"endColumn":17},{"ruleId":"354","severity":1,"message":"477","line":12,"column":8,"nodeType":"356","messageId":"357","endLine":12,"endColumn":20},{"ruleId":"354","severity":1,"message":"478","line":15,"column":10,"nodeType":"356","messageId":"357","endLine":15,"endColumn":24},{"ruleId":"354","severity":1,"message":"479","line":16,"column":8,"nodeType":"356","messageId":"357","endLine":16,"endColumn":14},{"ruleId":"354","severity":1,"message":"480","line":17,"column":8,"nodeType":"356","messageId":"357","endLine":17,"endColumn":23},{"ruleId":"354","severity":1,"message":"481","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":14},{"ruleId":"354","severity":1,"message":"455","line":20,"column":10,"nodeType":"356","messageId":"357","endLine":20,"endColumn":17},{"ruleId":"354","severity":1,"message":"482","line":83,"column":11,"nodeType":"356","messageId":"357","endLine":83,"endColumn":18},{"ruleId":"434","severity":1,"message":"435","line":89,"column":43,"nodeType":"436","messageId":"437","endLine":89,"endColumn":45},{"ruleId":"354","severity":1,"message":"458","line":93,"column":12,"nodeType":"356","messageId":"357","endLine":93,"endColumn":19},{"ruleId":"354","severity":1,"message":"459","line":93,"column":21,"nodeType":"356","messageId":"357","endLine":93,"endColumn":31},{"ruleId":"354","severity":1,"message":"398","line":103,"column":21,"nodeType":"356","messageId":"357","endLine":103,"endColumn":31},{"ruleId":"354","severity":1,"message":"483","line":104,"column":12,"nodeType":"356","messageId":"357","endLine":104,"endColumn":19},{"ruleId":"354","severity":1,"message":"484","line":105,"column":11,"nodeType":"356","messageId":"357","endLine":105,"endColumn":20},{"ruleId":"354","severity":1,"message":"430","line":106,"column":12,"nodeType":"356","messageId":"357","endLine":106,"endColumn":19},{"ruleId":"354","severity":1,"message":"492","line":106,"column":21,"nodeType":"356","messageId":"357","endLine":106,"endColumn":31},{"ruleId":"354","severity":1,"message":"493","line":107,"column":12,"nodeType":"356","messageId":"357","endLine":107,"endColumn":24},{"ruleId":"354","severity":1,"message":"494","line":107,"column":26,"nodeType":"356","messageId":"357","endLine":107,"endColumn":41},{"ruleId":"354","severity":1,"message":"487","line":108,"column":12,"nodeType":"356","messageId":"357","endLine":108,"endColumn":28},{"ruleId":"354","severity":1,"message":"488","line":108,"column":30,"nodeType":"356","messageId":"357","endLine":108,"endColumn":49},{"ruleId":"354","severity":1,"message":"489","line":110,"column":12,"nodeType":"356","messageId":"357","endLine":110,"endColumn":18},{"ruleId":"354","severity":1,"message":"490","line":110,"column":20,"nodeType":"356","messageId":"357","endLine":110,"endColumn":29},{"ruleId":"354","severity":1,"message":"438","line":1,"column":16,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"354","severity":1,"message":"369","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":38},{"ruleId":"354","severity":1,"message":"439","line":1,"column":40,"nodeType":"356","messageId":"357","endLine":1,"endColumn":48},{"ruleId":"354","severity":1,"message":"377","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"440","line":2,"column":16,"nodeType":"356","messageId":"357","endLine":2,"endColumn":26},{"ruleId":"354","severity":1,"message":"455","line":3,"column":17,"nodeType":"356","messageId":"357","endLine":3,"endColumn":24},{"ruleId":"354","severity":1,"message":"380","line":4,"column":15,"nodeType":"356","messageId":"357","endLine":4,"endColumn":18},{"ruleId":"354","severity":1,"message":"417","line":6,"column":11,"nodeType":"356","messageId":"357","endLine":6,"endColumn":16},{"ruleId":"354","severity":1,"message":"418","line":6,"column":18,"nodeType":"356","messageId":"357","endLine":6,"endColumn":29},{"ruleId":"354","severity":1,"message":"419","line":6,"column":31,"nodeType":"356","messageId":"357","endLine":6,"endColumn":40},{"ruleId":"354","severity":1,"message":"382","line":7,"column":5,"nodeType":"356","messageId":"357","endLine":7,"endColumn":10},{"ruleId":"354","severity":1,"message":"383","line":8,"column":5,"nodeType":"356","messageId":"357","endLine":8,"endColumn":14},{"ruleId":"354","severity":1,"message":"381","line":9,"column":5,"nodeType":"356","messageId":"357","endLine":9,"endColumn":10},{"ruleId":"444","severity":1,"message":"445","line":65,"column":39,"nodeType":"446","endLine":65,"endColumn":50},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["495"],"no-negated-in-lhs",["496"],"'SampleSearch' is defined but never used.","'makeStyles' is defined but never used.","'labObj' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'useCallback' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Container' is defined but never used.","'Link' is defined but never used.","'connect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'FormGroup' is defined but never used.","'VisibilityIcon' is defined but never used.","'Tooltip' is defined but never used.","'IconButton' is defined but never used.","'Button' is defined but never used.","'Stack' is defined but never used.","'classes' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'onSuccess' is assigned a value but never used.","'onError' is assigned a value but never used.","no-dupe-keys","Duplicate key 'age'.","ObjectExpression","'forwardRef' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'collectedSamples' is assigned a value but never used.","'setCollectedSamples' is assigned a value but never used.","'manifestData' is assigned a value but never used.","'saved' is assigned a value but never used.","'setSaved' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.","ArrayExpression",["497"],"'MatButton' is defined but never used.","'MdDashboard' is defined but never used.","'MdDeleteForever' is defined but never used.","'MdPerson' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'alpha' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'Table' is defined but never used.","'SaveIcon' is defined but never used.","'CancelIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'FaUserPlus' is defined but never used.","'FormFeedback' is defined but never used.","'Badge' is defined but never used.","'SendIcon' is defined but never used.","'samples' is assigned a value but never used.","'send' is assigned a value but never used.","'setSend' is assigned a value but never used.","'setStatus' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'ArrowDropDownIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'MaterialTable' is defined but never used.","'Spinner' is defined but never used.","'tableIcons' is assigned a value but never used.","'permissions' is assigned a value but never used.","'results' is assigned a value but never used.","'setResults' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'manifestObj.id'. Either include it or remove the dependency array.",["498"],"'sampleStatus' is assigned a value but never used.","'resultTestType' is assigned a value but never used.","'useRef' is defined but never used.","'FormText' is defined but never used.","'axios' is defined but never used.","'token' is defined but never used.","'url' is defined but never used.","'assignSampleId' is assigned a value but never used.","'HomeIcon' is defined but never used.","'AddResultModal' is defined but never used.","'CachedIcon' is defined but never used.","'manifestObj' is assigned a value but never used.","'Alert' is defined but never used.","'Chip' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Moment' is defined but never used.","'momentLocalizer' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'visible' is assigned a value but never used.","'onDismiss' is assigned a value but never used.","'config' is assigned a value but never used.","'setConfig' is assigned a value but never used.","'saveButtonStatus' is assigned a value but never used.","'setSaveButtonStatus' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'name' is assigned a value but never used.","'setSamples' is assigned a value but never used.","'optionsample' is assigned a value but never used.","'setOptionsample' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},"Update the dependencies array to be: [sampleObj]",{"range":"503","text":"504"},"Update the dependencies array to be: [manifestObj.id]",{"range":"505","text":"506"},[3198,3200],"[sampleObj]",[5668,5670],"[manifestObj.id]"]