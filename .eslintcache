[{"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\index.js":"1","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\App.js":"2","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"5","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"7","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js":"8","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js":"9","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js":"10","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"11","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\api.js":"12","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"13","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js":"14","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js":"15","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js":"16","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"17","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"18"},{"size":754,"mtime":1662103903664,"results":"19","hashOfConfig":"20"},{"size":1407,"mtime":1662103968473,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1662103905642,"results":"22","hashOfConfig":"20"},{"size":9235,"mtime":1662103903688,"results":"23","hashOfConfig":"20"},{"size":14506,"mtime":1662103968488,"results":"24","hashOfConfig":"20"},{"size":1826,"mtime":1662103905633,"results":"25","hashOfConfig":"20"},{"size":3073,"mtime":1662103968489,"results":"26","hashOfConfig":"20"},{"size":11714,"mtime":1662103968487,"results":"27","hashOfConfig":"20"},{"size":15009,"mtime":1662103968483,"results":"28","hashOfConfig":"20"},{"size":6025,"mtime":1662103968486,"results":"29","hashOfConfig":"20"},{"size":3056,"mtime":1662103903688,"results":"30","hashOfConfig":"20"},{"size":482,"mtime":1662117514951,"results":"31","hashOfConfig":"20"},{"size":9166,"mtime":1662103905639,"results":"32","hashOfConfig":"20"},{"size":10989,"mtime":1662103968485,"results":"33","hashOfConfig":"20"},{"size":17966,"mtime":1662103968484,"results":"34","hashOfConfig":"20"},{"size":4719,"mtime":1662103968485,"results":"35","hashOfConfig":"20"},{"size":101219,"mtime":1662103968490,"results":"36","hashOfConfig":"20"},{"size":4784,"mtime":1662103905637,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"1j0as5j",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\index.js",["86"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\";  \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\App.js",["87"],"import React from \"react\";\r\nimport {\r\n  //MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\n\r\nimport Home from './main/webapp/jsx/components/Home'\r\nimport SampleCollection from './main/webapp/jsx/components/SampleCollection/SamplesCollection';\r\nimport PrintManifest from './main/webapp/jsx/components/SampleCollection/PrintManifest';\r\nimport SampleSearch from './main/webapp/jsx/components/SampleCollection/SampleOrderLists';\r\nimport Result from './main/webapp/jsx/components/SampleCollection/Result'\r\nimport AddResult from './main/webapp/jsx/components/SampleCollection/AddResults'\r\n\r\nexport default function App() {\r\n  return (\r\n      <div>\r\n      <ToastContainer />\r\n        <Switch>\r\n         <Route path=\"/result\">\r\n          <Result />\r\n         </Route>\r\n         <Route path=\"/add-result\">\r\n           <AddResult />\r\n         </Route>\r\n         <Route path=\"/print-manifest\">\r\n             <PrintManifest />\r\n           </Route>\r\n         <Route path=\"/create-manifest\">\r\n            <SampleCollection />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["88","89","90","91","92","93","94","95","96","97","98","99","100"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport {Label, Input, FormGroup} from \"reactstrap\"\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {format} from \"date-fns\";\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport MaterialTable from 'material-table';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst SampleSearch = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const samples = [];\r\n    const [ dateFilter, setDateFilter] = useState({\r\n        startDate: null,\r\n        endDate: null\r\n    })\r\n\r\n    const handleChange = e => {\r\n        const {name, value} = e.target;\r\n        setDateFilter({...dateFilter, [name]: value})\r\n    }\r\n\r\n     const loadLabTestData = useCallback(async () => {\r\n            try {\r\n                const response = await axios.get(`${url}lims/collected-samples/`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                console.log(\"samples\", response);\r\n                setCollectedSamples(response.data);\r\n                setLoading(false)\r\n                localStorage.clear();\r\n\r\n            } catch (e) {\r\n                toast.error(\"An error occurred while fetching lab\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n                setLoading(false)\r\n            }\r\n        }, []);\r\n\r\n     useEffect(() => {\r\n     setLoading('true');\r\n         const onSuccess = () => {\r\n             setLoading(false)\r\n         }\r\n         const onError = () => {\r\n             setLoading(false)\r\n         }\r\n\r\n         loadLabTestData();\r\n\r\n     }, [loadLabTestData]);\r\n\r\n     const calculate_age = dob => {\r\n             var today = new Date();\r\n             var birthDate = new Date(dob);\r\n             var age_now = today.getFullYear() - birthDate.getFullYear();\r\n             return age_now\r\n\r\n           };\r\n\r\n     const handleSampleChanges = (sample) => {\r\n        sample.filter((item) => {\r\n            var i = samples.findIndex(x => (x.patientId === item.patientId && x.sampleId === item.sampleId && x.sampleType === item.sampleType));\r\n            if(i <= -1){\r\n                    console.log(\"items\", item)\r\n\r\n                    samples.push({\r\n                      patientID: [{\r\n                          idNumber: item.patientId,\r\n                          idTypeCode: item.typecode\r\n                      }],\r\n                      firstName: item.firstname,\r\n                      surName: item.surname,\r\n                      sex: item.sex,\r\n                      pregnantBreastFeedingStatus: \"\",\r\n                      age: 0,\r\n                      dateOfBirth: item.dob,\r\n                      age: item.age,\r\n                      sampleID: item.sampleId,\r\n                      sampleType: item.sampleType,\r\n                      indicationVLTest: 1,\r\n                      artCommencementDate: \"\",\r\n                      drugRegimen: \"\",\r\n                      sampleOrderedBy: item.orderby,\r\n                      sampleOrderDate: item.orderbydate,\r\n                      sampleCollectedBy: item.collectedby,\r\n                      sampleCollectionDate: item.datecollected,\r\n                      sampleCollectionTime: item.timecollected,\r\n                      dateSampleSent: format(new Date(), 'yyyy-MM-dd'),\r\n                      id: 0,\r\n                      manifestID: 0,\r\n                      pid: 0,\r\n                      priority: 0,\r\n                  });\r\n\r\n                  localStorage.setItem('samples', JSON.stringify(samples));\r\n\r\n              }\r\n             return null;\r\n        })\r\n\r\n     }\r\n\r\n  return (\r\n      <div>\r\n      <Card>\r\n         <Card.Body>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={2}>\r\n                   <FormGroup>\r\n                       <Label for=\"startDate\" className={classes.label}>Start date</Label>\r\n\r\n                       <Input\r\n                           type=\"date\"\r\n                           name=\"startDate\"\r\n\r\n                           id=\"startDate\"\r\n                           placeholder=\"Start Date\"\r\n                           onChange={handleChange}\r\n                           className={classes.input}\r\n                       />\r\n                   </FormGroup>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                    <FormGroup>\r\n                      <Label for=\"endDate\" className={classes.label}>End date</Label>\r\n\r\n                      <Input\r\n                          type=\"date\"\r\n                          name=\"endDate\"\r\n\r\n                          id=\"endDate\"\r\n                          placeholder=\"End Date\"\r\n                          onChange={handleChange}\r\n                          className={classes.input}\r\n                      />\r\n                  </FormGroup>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n\r\n              </Grid>\r\n            </Grid>\r\n          <br />\r\n          <MaterialTable\r\n           icons={tableIcons}\r\n              title=\"Sample Collection List\"\r\n              columns={[\r\n                  { title: \"Type code\", field: \"typecode\" },\r\n                  { title: \"Patient ID\", field: \"patientId\" },\r\n                  { title: \"First Name\", field: \"firstname\" },\r\n                  { title: \"Surname\", field: \"surname\" },\r\n                  { title: \"Sex\", field: \"sex\" },\r\n                  { title: \"DOB\", field: \"dob\" },\r\n                  { title: \"Age\", field: \"age\" },\r\n                  {\r\n                    title: \"Test Type\",\r\n                    field: \"testType\",\r\n                  },\r\n                  { title: \"Sample ID\", field: \"sampleId\" },\r\n                  {\r\n                    title: \"Sample Type\",\r\n                    field: \"sampleType\",\r\n                  },\r\n                  { title: \"Sample Orderby\", field: \"orderby\" },\r\n                  { title: \"Orderby Date\", field: \"orderbydate\", type: \"date\" , filtering: false },\r\n                  { title: \"Collected By\", field: \"collectedby\" },\r\n                  { title: \"Date Collected\", field: \"datecollected\", type: \"date\" , filtering: false},\r\n                  { title: \"Time Collected\", field: \"timecollected\", type: \"time\" , filtering: false},\r\n//                  {\r\n//                    title: \"Action\",\r\n//                    field: \"actions\",\r\n//                    filtering: false,\r\n//                  },\r\n              ]}\r\n              isLoading={loading}\r\n              data={ collectedSamples.filter( row => {\r\n                   let filterPass = true\r\n                   const date = new Date(row.sampleCollectionDate)\r\n                   if (dateFilter.startDate) {\r\n                     filterPass = filterPass && (new Date(dateFilter.startDate) <= date)\r\n                   }\r\n                   if (dateFilter.endDate) {\r\n                     filterPass = filterPass && (new Date(dateFilter.endDate) >= date)\r\n                   }\r\n                   return filterPass\r\n              }).map((row) => (\r\n                    {\r\n                      typecode: row.patientID.idTypeCode,\r\n                      patientId: row.patientID.idNumber,\r\n                      firstname: row.firstName,\r\n                      surname: row.surName,\r\n                      sex: row.sex,\r\n                      dob: row.dateOfBirth,\r\n                      age: calculate_age(row.dateOfBirth),\r\n                      testType: \"VL\",\r\n                      sampleId: row.sampleID,\r\n                      sampleType: row.sampleType,\r\n                      orderby: row.sampleOrderedBy,\r\n                      orderbydate: row.sampleOrderDate,\r\n                      collectedby: row.sampleCollectedBy,\r\n                      datecollected: row.sampleCollectionDate,\r\n                      timecollected: row.sampleCollectionTime,\r\n\r\n//                      actions:  <Link to ={{\r\n//                                      pathname: \"/samples-collection\",\r\n//                                      state: row\r\n//                                  }}\r\n//                                      style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\r\n//                                >\r\n//                                    <Tooltip title=\"Collect Sample\">\r\n//                                        <IconButton aria-label=\"Collect Sample\" >\r\n//                                            <VisibilityIcon color=\"primary\"/>\r\n//                                        </IconButton>\r\n//                                    </Tooltip>\r\n//                                </Link>\r\n                    })\r\n              )}\r\n\r\n                  options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        fontSize:'16px',\r\n                        padding:'10px'\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '300%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    selection: true,\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:5,\r\n                    debounceInterval: 400\r\n                }}\r\n                 onSelectionChange={(rows) => handleSampleChanges(rows)}\r\n\r\n          />\r\n           {/*  <div>\r\n                 <Stack direction=\"row\" spacing={2}\r\n                 m={1}\r\n                 display=\"flex\"\r\n                 justifyContent=\"flex-end\"\r\n                 alignItems=\"flex-end\">\r\n                      <Link color=\"inherit\"\r\n                          to={{pathname: \"/\"}}\r\n                           >\r\n                          <Button variant=\"outlined\" color=\"primary\">\r\n                             PrevPage\r\n                          </Button>\r\n                      </Link>\r\n                      {\" \"}\r\n                      { <Link color=\"inherit\"\r\n                             to={{\r\n                             pathname: \"/create-manifest\",\r\n                             state:{ sampleObj: samples }\r\n                             }}\r\n\r\n                              >\r\n                             <Button variant=\"outlined\" color=\"success\">\r\n                                NextPage\r\n                             </Button>\r\n                         </Link>\r\n                         }\r\n\r\n                  </Stack>\r\n                 <br />\r\n             </div>*/}\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SampleSearch;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["101","102"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport SampleCollection from './SampleCollection/SamplesCollection';\r\nimport ManifestList from './SampleCollection/ManifestList';\r\nimport {labObj} from './sampleObj'\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n    const [key, setKey] = useState('manifest-list');\r\n\r\n    const urlTabs = props.location && props.location.state ? props.location.state : null ;\r\n\r\n  useEffect ( () => {\r\n    switch(urlTabs){\r\n      case \"existing-manifest\": return setKey('manifest-list')\r\n      case \"collect-sample\": return setKey('collection')\r\n      case \"sample-manifest\": return setKey('manifest')\r\n      default: return setKey('manifest-list')\r\n    }\r\n  }, [urlTabs]);\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                    >\r\n                       <Tab eventKey=\"manifest-list\" title=\"Existing Manifest\">\r\n                         <ManifestList />\r\n                        </Tab>\r\n                        <Tab eventKey=\"collection\" title=\"Create Manifest\">\r\n                         <SampleCollection />\r\n                        </Tab>\r\n\r\n                    </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",["103","104","105","106"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport SampleOrderLists from './SampleOrderLists';\r\nimport CreateAManifest from './CreateAManifest';\r\nimport PrintManifest from './PrintManifest';\r\nimport Stack from '@mui/material/Stack';\r\nimport axios from \"axios\";\r\nimport {token, url } from \"../../../api\";\r\n\r\nfunction SampleCollection() {\r\nconst [activeStep, setActiveStep] = React.useState(0)\r\nconst [permissions, setPermissions] = useState([]);\r\n\r\n useEffect(() => {\r\n            userPermission();\r\n          }, []);\r\n\r\n        const userPermission =()=>{\r\n            axios\r\n                .get(`${url}account`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    console.log(\"permission\", response.data.permissions)\r\n                    setPermissions(response.data.permissions);\r\n\r\n                })\r\n                .catch((error) => {\r\n                });\r\n        }\r\n\r\nconst nextStep = () => {\r\n    if (activeStep < 2)\r\n        setActiveStep((currentStep) => currentStep + 1)\r\n}\r\n\r\nconst previousStep = () => {\r\n    if (activeStep !== 0)\r\n       setActiveStep((currentStep) => currentStep - 1)\r\n}\r\n\r\nconst renderContent = (step) => {\r\n     switch (step) {\r\n        case 0:\r\n          return <SampleOrderLists />;\r\n        case 1:\r\n          return <CreateAManifest />;\r\n        case 2:\r\n          return <PrintManifest />;\r\n        default:\r\n          return <div>Not Found</div>;\r\n      }\r\n}\r\nreturn(\r\n    <div>\r\n        <Stepper activeStep={activeStep}>\r\n            <Step>\r\n                <StepLabel>Select Collected Samples</StepLabel>\r\n            </Step>\r\n            <Step>\r\n                <StepLabel>Complete Manifest Form</StepLabel>\r\n            </Step>\r\n            <Step>\r\n                <StepLabel>Print Manifest</StepLabel>\r\n            </Step>\r\n\r\n        </Stepper>\r\n        <br />\r\n        <>\r\n            {renderContent(activeStep)}\r\n            <br />\r\n            <br />\r\n                { permissions.includes(\"all_permission\") ?\r\n                    <Stack direction=\"row\" spacing={2}\r\n                           m={1}\r\n                           display=\"flex\"\r\n                           justifyContent=\"flex-end\"\r\n                           alignItems=\"flex-end\">\r\n                           <Button variant=\"outlined\" color=\"primary\" onClick={() => previousStep()}\r\n                           >Previous Step</Button>\r\n                           {\" \"}\r\n                           <Button variant=\"outlined\" color=\"primary\" onClick={() => nextStep()}\r\n                           disabled={activeStep == 2 ? true : false}>Next Step</Button>\r\n                    </Stack> : \" \" }\r\n\r\n\r\n\r\n        </>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default SampleCollection","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport { Badge, Spinner } from 'reactstrap';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CachedIcon from '@mui/icons-material/Cached';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Result = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    //console.log(\"maniObj\",manifestObj)\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [results, setResults] = useState([])\r\n\r\n     const loadResults = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}lims/manifest-results/${manifestObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"results\", response);\r\n\r\n           //setResults([]);\r\n            setLoading(false)\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n    const sampleStatus = e =>{\r\n        if(parseInt(e)===1){\r\n            return <p><Badge  color=\"success\">Completed</Badge></p>\r\n        }else if(parseInt(e)===2){\r\n            return <p><Badge  color=\"danger\">Rejected</Badge></p>\r\n        }else if(parseInt(e)===3){\r\n            return <p><Badge  color=\"info\">In-Progress</Badge></p>\r\n        }else if(parseInt(e)===4){\r\n            return <p><Badge  color=\"warning\">Re-Run</Badge></p>\r\n        }else{\r\n            return <p><Badge  color=\"dark\">Result Pending</Badge></p>\r\n        }\r\n    }\r\n\r\n    const resultTestType = e => {\r\n        if(parseInt(e)===2){\r\n            return <p><Badge  color=\"primary\">Viral Load</Badge></p>\r\n        }else if(parseInt(e)===1){\r\n            return <p><Badge  color=\"info\">EID</Badge></p>\r\n        }\r\n    }\r\n\r\n    const reload = e => {\r\n        console.log(\"reload results\");\r\n        loadResults();\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n           <p style={{textAlign: 'right'}}>\r\n             <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<CachedIcon />}\r\n              onClick={reload}>\r\n              Refresh\r\n            </MatButton>\r\n             <Link color=\"inherit\"\r\n               to={{pathname: \"/\"}}\r\n                >\r\n               <MatButton\r\n                   variant=\"contained\"\r\n                   color=\"primary\"\r\n                   className={classes.button}\r\n                   startIcon={<HomeIcon />}\r\n                   >\r\n                   back Home\r\n               </MatButton>\r\n              </Link>\r\n\r\n             </p>\r\n             <hr />\r\n              {\r\n\r\n//                results.length  === 0 ? <p> <Spinner color=\"primary\" /> Loading Please Wait</p> :\r\n                <>\r\n                   <Alert style={{width:'100%',fontSize:'20px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                          <Alert.Heading>PCR Sample Result</Alert.Heading>\r\n                   </Alert>\r\n                  <br/>\r\n                  <Table bordered size=\"sm\" responsive>\r\n                               <tbody>\r\n                                    <tr>\r\n                                       <th scope=\"row\">ManifestID:</th>\r\n                                       <td>{manifestObj.manifestID}</td>\r\n                                       <th scope=\"row\">Facility Name:</th>\r\n                                       <td>{manifestObj.sendingFacilityName}</td>\r\n                                       <th scope=\"row\">Facility Id:</th>\r\n                                       <td>{manifestObj.sendingFacilityID}</td>\r\n                                     </tr>\r\n                                     <tr>\r\n                                       <th scope=\"row\"></th>\r\n                                       <td></td>\r\n                                       <th scope=\"row\"></th>\r\n                                       <td></td>\r\n                                       <th scope=\"row\"></th>\r\n                                       <td></td>\r\n                                     </tr>\r\n                                      <tr>\r\n                                       <th scope=\"row\">Test Type:</th>\r\n                                       <td>{<p><Badge  color=\"primary\">Viral Load</Badge></p>}</td>\r\n                                       <th scope=\"row\">Receiving Lab Name:</th>\r\n                                       <td>{manifestObj.receivingLabName}</td>\r\n                                       <th scope=\"row\">Receiving Lab Number:</th>\r\n                                       <td>{manifestObj.receivingLabID}</td>\r\n                                     </tr>\r\n                               </tbody>\r\n                             </Table>\r\n                              <br/>\r\n                               <div>\r\n                                        <Table striped bordered size=\"sm\" responsive>\r\n                                         <thead style={{  backgroundColor:'#014d88', color:'#fff' }}>\r\n                                           <tr>\r\n                                             <th>Sample ID</th>\r\n                                             <th>Approval Date</th>\r\n                                             {/*<th>Assay Date</th>\r\n                                             <th>Date Received at PCR Lab</th>*/}\r\n                                             <th>Date Result Dispatched</th>\r\n                                             <th>PCR Sample Number</th>\r\n                                              {/*<th>Result Date</th>*/}\r\n                                             <th>Sample Status</th>\r\n                                             <th>Sample Testable</th>\r\n                                             <th>Test Result</th>\r\n                                              {/*<th>Visit Date</th>*/}\r\n                                           </tr>\r\n                                         </thead>\r\n                                         <tbody>\r\n                                                   <tr>\r\n                                                      <td>0005</td>\r\n                                                      <td scope=\"row\">--:--:--</td>\r\n                                                        {/*<td>{data.assayDate}</td>\r\n                                                      <td>{data.dateSampleReceivedAtPCRLab}</td>*/}\r\n                                                      <td>--:--:--</td>\r\n                                                      <td>----</td>\r\n                                                       {/*<td>{data.resultDate}</td>*/}\r\n\r\n                                                      <td><p><Badge  color=\"dark\">Result Pending</Badge></p></td>\r\n                                                      <td>Not Available</td>\r\n                                                      <td>Not Ready</td>\r\n                                                       {/*<td>{data.visitDate}</td>*/}\r\n                                                   </tr>\r\n                                         </tbody>\r\n                                       </Table>\r\n                                 </div>\r\n                </>\r\n              }\r\n\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { CardBody,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst AddResult = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n    //console.log(\"maniObj\",manifestObj)\r\n    //console.log(\"permissions\",permissions)\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [results, setResults] = useState({\r\n         manifestID: manifestObj.manifestID,\r\n         receivingFacilityID: manifestObj.receivingLabID,\r\n         receivingFacilityName: manifestObj.receivingLabName,\r\n         sendingPCRLabID: manifestObj.sendingFacilityID,\r\n         sendingPCRLabName: manifestObj.sendingFacilityName,\r\n         testType: \"Viral Load\",\r\n         samples: []\r\n    })\r\n\r\n    const [inputFields, setInputFields] = useState([{\r\n        testResult: \"\",\r\n        resultDate: \"\",\r\n        pcrLabSampleNumber: \"\",\r\n        approvalDate: \"\",\r\n        assayDate: \"\",\r\n        sampleTestable: \"\",\r\n        sampleStatus: \"\",\r\n        sampleID: \"\"\r\n    }])\r\n\r\n     const loadResults = useCallback(async () => {\r\n        try {\r\n\r\n            setLoading(false)\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n     const handleChange = (i, event) => {\r\n           let data = [...inputFields]\r\n           const { name, value } = event.target\r\n           //console.log(value)\r\n           data[i][name] = value\r\n           setResults({ ...results, samples: data})\r\n     }\r\n\r\n     const handleSubmit = async (e) => {\r\n         e.preventDefault()\r\n        console.log(results)\r\n        history.push(\"/\");\r\n     }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n\r\n          <p style={{textAlign: 'right'}}>\r\n          <Link color=\"inherit\"\r\n            to={{pathname: \"/\"}}\r\n             >\r\n            <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<HomeIcon />}>\r\n                back Home\r\n            </MatButton>\r\n           </Link>\r\n          </p>\r\n           <hr />\r\n           <Form>\r\n                 <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                        <Alert.Heading>Basic Manifest Information</Alert.Heading>\r\n                 </Alert>\r\n                <Row>\r\n                  <Col> <FormGroup>\r\n                       <Label for=\"manifestID\" className={classes.label}>Manifest Id</Label>\r\n\r\n                       <Input\r\n                           type=\"text\"\r\n                           name=\"manifestID\"\r\n                           id=\"manifestID\"\r\n                           placeholder=\"manifest ID\"\r\n                           className={classes.input}\r\n                           onChange={handleChange}\r\n                           value={manifestObj.manifestID}\r\n                           disabled\r\n                       />\r\n                   </FormGroup></Col>\r\n                  <Col><FormGroup>\r\n                   <Label for=\"testType\" className={classes.label}>Test Type</Label>\r\n\r\n                   <Input\r\n                       type=\"text\"\r\n                       name=\"testType\"\r\n                       id=\"testType\"\r\n                       placeholder=\"Test Type\"\r\n                       className={classes.input}\r\n                       onChange={handleChange}\r\n                       value=\"Viral Load  \"\r\n                   />\r\n               </FormGroup></Col>\r\n                  <Col></Col>\r\n                  <Col></Col>\r\n                </Row>\r\n              <Row>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabName\" className={classes.label}>Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabName\"\r\n                         id=\"sendingPCRLabName\"\r\n                         placeholder=\"Sending PCR LabName\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabID\" className={classes.label}>Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabID\"\r\n                         id=\"sendingPCRLabID\"\r\n                         placeholder=\"Sending PCR Lab ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col> <FormGroup>\r\n                     <Label for=\"receivingFacilityName\" className={classes.label}>Receiving Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityName\"\r\n                         id=\"receivingFacilityName\"\r\n                         placeholder=\"Receiving Facility Name\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"receivingFacilityID\" className={classes.label}>Receiving Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityID\"\r\n                         id=\"receivingFacilityID\"\r\n                         placeholder=\"Receiving Facility ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n              </Row>\r\n              <br />\r\n                <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#992E62', color: \"#fff\", textAlign: 'center'}}>\r\n                  <Alert.Heading>PCR Sample Details</Alert.Heading>\r\n               </Alert>\r\n               {\r\n                    inputFields.map((data, i) => (\r\n                    <>\r\n                          <Row>\r\n                            <Col>  <FormGroup>\r\n                                 <Label for=\"sampleID\" className={classes.label}>Sample ID *</Label>\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"sampleID\"\r\n                                     id=\"sampleID\"\r\n                                     placeholder=\"Sample ID\"\r\n                                     className={classes.input}\r\n                                     //value={data.sampleID}\r\n                                     onChange={ e => handleChange(i, e)}\r\n                                     //disabled\r\n                                 />\r\n                             </FormGroup></Col>\r\n                            <Col><FormGroup>\r\n                                 <Label for=\"sampleStatus\" className={classes.label}>Sample Status *</Label>\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"sampleStatus\"\r\n                                     id=\"sampleStatus\"\r\n                                     placeholder=\"Sample Status\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                            <Col><FormGroup>\r\n                                 <Label for=\"surName\" className={classes.label}>Sample Testable *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"sampleTestable\"\r\n                                     id=\"sampleTestable\"\r\n                                     placeholder=\"Sample Testable\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                            <Col> <FormGroup>\r\n                                 <Label for=\"assayDate\" className={classes.label}>Assay Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"assayDate\"\r\n                                     id=\"assayDate\"\r\n                                     placeholder=\"Assay Date\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                          </Row>\r\n                        <Row>\r\n                          <Col>\r\n                             <FormGroup>\r\n                                 <Label for=\"approvalDate\" className={classes.label}>Approval Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"approvalDate\"\r\n                                     id=\"approvalDate\"\r\n                                     placeholder=\"Approval Date\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"pcrLabSampleNumber\" className={classes.label}>Pcr Lab Sample No *</Label>\r\n\r\n                             <Input\r\n                                 type=\"text\"\r\n                                 name=\"pcrLabSampleNumber\"\r\n                                 id=\"pcrLabSampleNumber\"\r\n                                 placeholder=\"Pcr Lab Sample Number\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"resultDate\" className={classes.label}>Result Date *</Label>\r\n\r\n                             <Input\r\n                                 type=\"date\"\r\n                                 name=\"resultDate\"\r\n                                 id=\"resultDate\"\r\n                                 placeholder=\"result Date\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"testResult\" className={classes.label}>Test result *</Label>\r\n\r\n                             <Input\r\n                                 type=\"text\"\r\n                                 name=\"testResult\"\r\n                                 id=\"testResult\"\r\n                                 placeholder=\"Test result\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                        </Row>\r\n                    </>\r\n                    ))\r\n               }\r\n                <hr />\r\n                { permissions.includes(\"all_permission\") ? <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                                                                               startIcon={<SaveIcon />} onClick={handleSubmit} >\r\n                                                                             Save Result\r\n                                                                           </Button> : \" \"}\r\n           </Form>\r\n\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddResult;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"import React, {useEffect, useCallback, useState, useRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport ManifestPrint from './ManifestPrint';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport PrintIcon from '@mui/icons-material/Print';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst PrintManifest = (props) => {\r\n    let history = useHistory();\r\n    const sampleObj = history.location && history.location.state ? history.location.state.sampleObj : {}\r\n    //console.log(\"props\",sampleObj)\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const manifestData = []\r\n    const [saved, setSaved] = useState(false);\r\n    const [localStore, SetLocalStore] = useState([]);\r\n    const [send, setSend] = useState(false);\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n      });\r\n\r\n    useEffect(() => {\r\n      const manifests = JSON.parse(localStorage.getItem('manifest'));\r\n      if (manifests) {\r\n        SetLocalStore(manifests);\r\n        localStorage.clear();\r\n      }else {\r\n        SetLocalStore(sampleObj)\r\n      }\r\n    }, []);\r\n\r\n     const sendManifest = async (e) => {\r\n            e.preventDefault()\r\n             await axios.get(`${url}lims/ready-manifests/${localStore.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                .then((resp) => {\r\n                    console.log(\"sending manifest\", resp)\r\n                    if (resp.data.errors.length > 0) {\r\n                        toast.error(resp.data.errors[0].reasons, {\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                         });\r\n                         setSend(true)\r\n                    }\r\n                    else {\r\n                         toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n                            position: toast.POSITION.TOP_RIGHT\r\n                        });\r\n                        setSend(true)\r\n                    }\r\n\r\n                })\r\n        }\r\n\r\n  return (\r\n      <div>\r\n      <Card>\r\n         <Card.Body>\r\n\r\n            <p style={{textAlign: 'right'}}>\r\n            { localStore.manifestStatus === \"Ready\" ?\r\n                <MatButton\r\n                     variant=\"contained\"\r\n                     color=\"success\"\r\n                     className={classes.button}\r\n                     startIcon={<SendIcon />}\r\n                     disabled={!send ? false : true}\r\n                     onClick={sendManifest}\r\n                 >\r\n                     Send Manifest\r\n                 </MatButton> : \" \"\r\n            }\r\n\r\n            <MatButton\r\n                 variant=\"contained\"\r\n                 color=\"success\"\r\n                 className={classes.button}\r\n                 startIcon={<PrintIcon />}\r\n                 disabled={!send ? false : true}\r\n                 onClick={handlePrint}\r\n             >\r\n                 Print\r\n             </MatButton>\r\n\r\n               <Link color=\"inherit\"\r\n                 to={{pathname: \"/\"}}\r\n                  >\r\n                 <MatButton\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n                     className={classes.button}\r\n                     startIcon={<HomeIcon />}>\r\n                     back Home\r\n                 </MatButton>\r\n                </Link>\r\n                  <Link color=\"inherit\"\r\n                     to={{pathname: \"/result\", state: { manifestObj: localStore }}}\r\n                      >\r\n                     <MatButton\r\n                         variant=\"contained\"\r\n                         color=\"secondary\"\r\n                         className={classes.button}\r\n                         startIcon={<HomeIcon />}>\r\n                         Results\r\n                     </MatButton>\r\n                    </Link>\r\n               </p>\r\n            <ManifestPrint sampleObj={localStore} ref={componentRef}/>\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrintManifest;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { MdDashboard, MdDeleteForever, MdModeEdit, MdPerson } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport { alpha } from '@material-ui/core/styles'\r\nimport SplitActionButton from './SplitActionButton';\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Col,Input,\r\n    FormGroup,\r\n    Label,Card, CardBody, Table\r\n} from 'reactstrap';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport \"@reach/menu-button/styles.css\";\r\nimport {FaEye, FaUserPlus} from \"react-icons/fa\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\nconst DownloadManifest = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const [permissions, setPermissions] = useState([]);\r\n\r\n     useEffect(() => {\r\n            userPermission();\r\n          }, []);\r\n\r\n        const userPermission =()=>{\r\n            axios\r\n                .get(`${url}account`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    console.log(\"permission\", response.data.permissions)\r\n                    setPermissions(response.data.permissions);\r\n\r\n                })\r\n                .catch((error) => {\r\n                });\r\n        }\r\n\r\n         const loadManifestData = useCallback(async () => {\r\n            try {\r\n                const response = await axios.get(`${url}lims/manifests`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                //console.log(\"manifest\", response);\r\n                setCollectedSamples(response.data);\r\n                setLoading(false)\r\n\r\n            } catch (e) {\r\n                toast.error(\"An error occurred while fetching lab\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n                setLoading(false)\r\n            }\r\n        }, []);\r\n\r\n         useEffect(() => {\r\n         setLoading('true');\r\n\r\n             loadManifestData();\r\n\r\n         }, [loadManifestData]);\r\n\r\n     const actionItems = row => {\r\n          return  [\r\n          {...(permissions.includes('view_manifest') || permissions.includes(\"all_permission\") &&\r\n              {\r\n                  name:'View',\r\n                  type:'link',\r\n                  icon:<FaEye  size=\"22\"/>,\r\n                  to:{\r\n                      pathname: \"/print-manifest\",\r\n                      state: { sampleObj: row, permissions:permissions  }\r\n                  }\r\n              }\r\n          )},\r\n//              {...(permissions.includes('view_patient') || permissions.includes(\"all_permission\")&&\r\n//                      {\r\n//                          name:'Print Manifest',\r\n//                          type:'link',\r\n//                          icon:<MdPerson size=\"20\" color='rgb(4, 196, 217)' />,\r\n//                          to:{\r\n//                              pathname: \"/print-manifest\",\r\n//                              state: { sampleObj: row, permissions:permissions  }\r\n//                          }\r\n//                      }\r\n//              )},\r\n\r\n              {...(permissions.includes('get_result') || permissions.includes(\"all_permission\") &&\r\n                      {\r\n                          name:' Results',\r\n                          type:'link',\r\n                          icon:<FaEye size=\"20\" color='rgb(4, 196, 217)' />,\r\n                          to:{\r\n                              pathname: \"/result\",\r\n                              state: { manifestObj: row, permissions:permissions }\r\n                          }\r\n                      }\r\n                  )},\r\n              {...(permissions.includes('add_result') || permissions.includes(\"all_permission\") &&\r\n                      {\r\n                          name:'Add Result',\r\n                          type:'link',\r\n                          icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)'  />,\r\n                          to:{\r\n                              pathname: \"/add-result\",\r\n                              state: { manifestObj: row, permissions:permissions }\r\n                          }\r\n                      }\r\n                  )}\r\n           ]\r\n       }\r\n\r\n  return (\r\n    <>\r\n       <div>\r\n           {/*<Stack direction=\"row\" spacing={2}\r\n           m={1}\r\n           display=\"flex\"\r\n           justifyContent=\"flex-end\"\r\n           alignItems=\"flex-end\">\r\n                <Link color=\"inherit\"\r\n                    to={{pathname: \"/create-manifest\"}}\r\n                     >\r\n                    <Button variant=\"outlined\" color=\"primary\">\r\n                       Create Manifest\r\n                    </Button>\r\n                </Link>\r\n\r\n            </Stack>\r\n           <br />*/}\r\n       </div>\r\n       <div>\r\n              <MaterialTable\r\n               icons={tableIcons}\r\n                  title=\"Existing Manifest List\"\r\n                  columns={[\r\n                      { title: \"Manifest Id\", field: \"manifestId\" },\r\n                      { title: \"Pickup Date\", field: \"pickupDate\" },\r\n                      { title: \"Created Date\", field: \"createDate\" },\r\n                      { title: \"Receiving Lab\", field: \"lab\" },\r\n                       { title: \"Packaged By\", field: \"packaged_by\" },\r\n                      {\r\n                        title: \"Status\",\r\n                        field: \"status\",\r\n                      },\r\n                      {\r\n                        title: \"Action\",\r\n                        field: \"actions\",\r\n                        filtering: false,\r\n                      },\r\n                  ]}\r\n                  isLoading={loading}\r\n                  data={ collectedSamples.map((row) => (\r\n                        {\r\n                          manifestId: row.manifestID,\r\n                          pickupDate: row.dateScheduledForPickup.replace('T', ' '),\r\n                          createDate: row.createDate.replace('T', ' '),\r\n                          lab: row.receivingLabName,\r\n                          packaged_by: row.samplePackagedBy,\r\n                          status: row.manifestStatus,\r\n\r\n                          actions:\r\n                            <div>\r\n                               <SplitActionButton actions={actionItems(row)} />\r\n                            </div>\r\n\r\n                        }))}\r\n\r\n                      options={{\r\n                        headerStyle: {\r\n                            backgroundColor: \"#014d88\",\r\n                            color: \"#fff\",\r\n                            fontSize:'16px',\r\n                            padding:'10px'\r\n                        },\r\n                        searchFieldStyle: {\r\n                            width : '200%',\r\n                            margingLeft: '250px',\r\n                        },\r\n                        selection: false,\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        searchFieldAlignment: 'left',\r\n                        pageSizeOptions:[10,20,100],\r\n                        pageSize:10,\r\n                        debounceInterval: 400\r\n                    }}\r\n\r\n              />\r\n       </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DownloadManifest;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js",["201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport {format} from \"date-fns\";\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Col, Card, CardBody, Table,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { pcr_lab } from './pcr';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'16px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'16px',\r\n        color:'rgb(153, 46, 98)',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst CreateAManifest = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const samples = []\r\n    const [saved, setSaved] = useState(false);\r\n    const [send, setSend] = useState(false);\r\n    const [localStore, SetLocalStore] = useState([]);\r\n    const [manifestsId, setManifestsId] = useState(0);\r\n    const [status, setStatus] = useState(\"Pending\")\r\n    const [validate, setValidate] = useState({\r\n        dateScheduledForPickupSucess: false,\r\n        dateScheduledForPickupFail: false,\r\n        temperatureAtPickup: false,\r\n        receivingLabID: \"\",\r\n        receivingLabName: \"\",\r\n        courierRiderName: \"\",\r\n        courierContact: \"\"\r\n    })\r\n\r\n    useEffect(() => {\r\n      const collectedSamples = JSON.parse(localStorage.getItem('samples'));\r\n      if (collectedSamples) {\r\n        SetLocalStore(collectedSamples);\r\n      }\r\n    }, []);\r\n\r\n    const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\"});\r\n\r\n    const [manifestData, setManifestData] = useState({\r\n\r\n         manifestID: \"\",\r\n         manifestStatus: \"Pending\",\r\n         sendingFacilityID: \"FH7LMnbnVlT\",\r\n         sendingFacilityName: \"CHC ZUNGERU\",\r\n         receivingLabID: pcrLabCode.labNo,\r\n         receivingLabName: pcrLabCode.name,\r\n         dateScheduledForPickup: \"\",\r\n         temperatureAtPickup: \"\",\r\n         samplePackagedBy: \"\",\r\n         courierRiderName: \"\",\r\n         courierContact: \"\",\r\n         createDate: \"\",\r\n         sampleInformation: localStore,\r\n         id: 0,\r\n         uuid: \"\"\r\n     })\r\n\r\n\r\n    const handleChange = (event) => {\r\n           checkPCRLab(event.target.value)\r\n           const { name, value } = event.target\r\n           setManifestData({ ...manifestData, [name]: value, receivingLabID: pcrLabCode.labNo,\r\n           receivingLabName: pcrLabCode.name, sampleInformation: localStore })\r\n     }\r\n\r\n    const checkPCRLab = (name) => {\r\n        pcr_lab.map(( val ) => {\r\n            if (val.name === name) {\r\n                setPcrLabCode({name: val.name, labNo: val.labNo})\r\n            }\r\n        })\r\n    }\r\n\r\n   const validateInputs = (manifestData) => {\r\n        //console.log(\"mani\",manifestData)\r\n        if (manifestData.dateScheduledForPickup.length === 0) {\r\n            validate.dateScheduledForPickupFail = true;\r\n        }\r\n\r\n        setValidate({validate})\r\n       //console.log(\"after\",validate)\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        validateInputs(manifestData)\r\n\r\n        console.log(\"xxx\",manifestData);\r\n\r\n        if (manifestData.dateScheduledForPickup.length === 0) {\r\n             toast.error(\"Sample Pick up date can not be empty\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n             });\r\n        }\r\n\r\n        if ( manifestData.receivingLabName.length === 0) {\r\n             toast.error(\"Receiving lab can not be empty\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n             });\r\n        }\r\n        else{\r\n               await axios.post(`${url}lims/manifests`, manifestData,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    setManifestsId(resp.data.id)\r\n                     console.log(\"response\", resp)\r\n                      setSaved(true);\r\n                    toast.success(\"Sample manifest saved successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                    manifestData.manifestID = resp.data.manifestID\r\n                    manifestData.sendingFacilityID = resp.data.sendingFacilityID\r\n                    manifestData.sendingFacilityName = resp.data.sendingFacilityName\r\n\r\n                    localStorage.setItem('manifest', JSON.stringify(manifestData));\r\n                    localStorage.removeItem(\"samples\");\r\n                });\r\n        }\r\n    }\r\n\r\n    const sendManifest = async (e) => {\r\n        e.preventDefault()\r\n         await axios.get(`${url}lims/ready-manifests/${manifestsId}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            .then((resp) => {\r\n                console.log(\"sending manifest\", resp)\r\n                setSend(true)\r\n                toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n\r\n//                if (resp.data.errors.length > 0) {\r\n//                    toast.error(resp.data.errors[0].reasons, {\r\n//                        position: toast.POSITION.TOP_RIGHT\r\n//                     });\r\n//                     setSend(true)\r\n//                }\r\n//                else {\r\n//                     toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n//                        position: toast.POSITION.TOP_RIGHT\r\n//                    });\r\n//                    setSend(true)\r\n//                    setStatus(\"Manifest Sent\");\r\n//                }\r\n            })\r\n    }\r\n\r\n  return (\r\n      <>\r\n        <Card>\r\n            <CardBody>\r\n             <br/>\r\n                <Form>\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                      <Grid container spacing={2}>\r\n                        <Grid item xs={6} md={4}>\r\n                            <FormGroup>\r\n                                <Label for=\"dateScheduledForPickup\" className={classes.label}>Date & Time *</Label>\r\n\r\n                                <Input\r\n                                    type=\"datetime-local\"\r\n                                    name=\"dateScheduledForPickup\"\r\n                                    id=\"dateScheduledForPickup\"\r\n                                    placeholder=\"Date & Time Created\"\r\n                                    className={classes.input}\r\n                                    invalid={manifestData.dateScheduledForPickup.length === 0? true: false}\r\n                                    value={manifestData.dateScheduledForPickup}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <FormFeedback>\r\n                                  Pick up date is a required field\r\n                                </FormFeedback>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4}>\r\n                             <FormGroup>\r\n                                <Label for=\"receivingLabName\" className={classes.label}>Receiving Lab *</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"select\"\r\n                                    value={pcrLabCode.name}\r\n                                    id=\"receivingLabName\"\r\n                                    onChange={handleChange}\r\n                                    className={classes.input}\r\n                                    invalid={pcrLabCode.name.length === 0? true: false}\r\n                                >\r\n                                  <option>\r\n                                    Selcet PCR Lab\r\n                                  </option>\r\n                                  {pcr_lab.map((value, i) =>\r\n                                  <option key={i} value={value.name} >{value.name}</option>)}\r\n                                </Input>\r\n                                <FormFeedback>Receiving lab is a required field</FormFeedback>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4}>\r\n                             <FormGroup>\r\n                                 <Label for=\"receivingLabID\" className={classes.label}>Receiving Lab number *</Label>\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"receivingLabID\"\r\n                                     value={pcrLabCode.labNo}\r\n                                     id=\"receivingLabID\"\r\n                                     onChange={handleChange}\r\n                                     className={classes.input}\r\n                                     disabled\r\n                                     invalid={pcrLabCode.labNo.length === 0? true: false}\r\n                                 />\r\n                             <FormFeedback>Receiving lab Id is a required field</FormFeedback>\r\n                             </FormGroup>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4}>\r\n                            <FormGroup>\r\n                                <Label for=\"courierRiderName\" className={classes.label}>Courier Name *</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"courierRiderName\"\r\n                                    id=\"courierRiderName\"\r\n                                    value={manifestData.courierRiderName}\r\n                                    onChange={handleChange}\r\n                                    className={classes.input}\r\n                                    invalid={manifestData.courierRiderName.length === 0? true: false}\r\n                                />\r\n                            <FormFeedback>Courier name is a required field</FormFeedback>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={4}>\r\n                            <FormGroup>\r\n                                <Label for=\"courierContact\" className={classes.label}>Courier Contact *</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"courierContact\"\r\n                                    value={manifestData.courierContact}\r\n                                    id=\"courierContact\"\r\n                                    onChange={handleChange}\r\n                                    className={classes.input}\r\n                                    invalid={manifestData.courierContact.length === 0? true: false}\r\n                                />\r\n                                <FormFeedback>Courier contact is a required field</FormFeedback>\r\n                            </FormGroup>\r\n                         </Grid>\r\n                         <Grid item xs={6} md={4}>\r\n                              <FormGroup>\r\n                                 <Label for=\"samplePackagedBy\" className={classes.label}>Sample Packaged By *</Label>\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"samplePackagedBy\"\r\n                                     value={manifestData.samplePackagedBy}\r\n                                     id=\"samplePackagedBy\"\r\n                                     onChange={handleChange}\r\n                                     className={classes.input}\r\n                                     invalid={manifestData.samplePackagedBy.length === 0? true: false}\r\n                                 />\r\n                                 <FormFeedback>Sample package by is a required field</FormFeedback>\r\n                             </FormGroup>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={6}>\r\n                            <FormGroup>\r\n                                <Label for=\"manifest_status\" className={classes.label}>Status</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"manifestStatus\"\r\n                                    id=\"manifestStatus\"\r\n                                    value={status}\r\n                                    onChange={handleChange}\r\n                                    disabled\r\n                                    className={classes.input}\r\n                                />\r\n\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={6}>\r\n                              <FormGroup>\r\n                                  <Label for=\"temperatureAtPickup\" className={classes.label}>Tempaerature at pickup</Label>\r\n                                  <Input\r\n                                      type=\"text\"\r\n                                      name=\"temperatureAtPickup\"\r\n                                      id=\"temperatureAtPickup\"\r\n                                      value={manifestData.temperatureAtPickup}\r\n                                      onChange={handleChange}\r\n                                      invalid={manifestData.temperatureAtPickup.length === 0? true: false}\r\n                                      className={classes.input}\r\n                                  />\r\n                              <FormFeedback>\r\n                                Temperature at pickup is a required\r\n                              </FormFeedback>\r\n                              </FormGroup>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={6}>\r\n                                <FormGroup>\r\n                                   <Label for=\"total_sample\" className={classes.label}>Total Sample</Label>\r\n                                   <Input\r\n                                       type=\"text\"\r\n                                       name=\"total_sample\"\r\n                                       id=\"total_sample\"\r\n                                       value={localStore.length}\r\n                                       onChange={handleChange}\r\n                                       disabled\r\n                                       className={classes.input}\r\n                                   />\r\n\r\n                               </FormGroup>\r\n                            </Grid>\r\n                          <Grid item xs={6} md={6}>\r\n                             <FormGroup>\r\n                               <Label for=\"test_type\" className={classes.label}>Test type</Label>\r\n                               <Input\r\n                                   type=\"text\"\r\n                                   name=\"test_type\"\r\n                                   id=\"test_type\"\r\n                                   value=\"VL\"\r\n                                   onChange={handleChange}\r\n                                   disabled\r\n                                   className={classes.input}\r\n                               />\r\n\r\n                           </FormGroup>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Box>\r\n                    {\r\n                        send ? \" \" :\r\n                        <>\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                            startIcon={<SaveIcon />} onClick={handleSubmit} disabled={!saved ? false : true}>\r\n                              Save\r\n                            </Button>\r\n                            {\" \"}\r\n                            <Button variant=\"contained\" color=\"secondary\" startIcon={<SendIcon />}\r\n                            type=\"submit\" onClick={sendManifest} disabled={saved ? false : true}>\r\n                              Send\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form>\r\n             </CardBody>\r\n        </Card>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default CreateAManifest;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js",["229","230","231","232","233","234","235","236","237","238","239","240","241","242"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport {logo} from './pcr'\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Col,Input,\r\n    FormGroup,\r\n    Label,Card, CardBody, Table\r\n} from 'reactstrap';\r\n\r\nlet today = new Date().toLocaleDateString()\r\n\r\n\r\nclass ManifestPrint extends React.Component {\r\n\r\n  render() {\r\n    console.log(this.props.sampleObj)\r\n    return (\r\n             <Card>\r\n              <CardBody>\r\n                  <div>\r\n                  <span>{today}</span>\r\n                         <Table size=\"sm\">\r\n                              <tbody>\r\n                                   <tr>\r\n                                      <th scope=\"row\"></th>\r\n\r\n                                      <th scope=\"row\"></th>\r\n\r\n                                      <th scope=\"row\" className=\"text-center\">\r\n                                        <img src={logo} style={{width: \"80px\", height: \"80px\"}}/>\r\n                                      </th>\r\n\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <th scope=\"row\"></th>\r\n\r\n                                      <th scope=\"row\"><h2 className=\"text-center\">NISRN TRANSPORTATION MANIFEST</h2></th>\r\n\r\n                                      <th scope=\"row\"></th>\r\n\r\n                                    </tr>\r\n                              </tbody>\r\n                            </Table>\r\n                      </div>\r\n                <br/>\r\n              <br />\r\n            <div>\r\n                   <Table bordered size=\"sm\">\r\n                      <tbody>\r\n                           <tr>\r\n                              <th scope=\"row\">Pick Up Date:</th>\r\n                              <td>{this.props.sampleObj.dateScheduledForPickup === null ? \" \" : this.props.sampleObj.dateScheduledForPickup?.replace(\"T\", \" \")}</td>\r\n                              <th scope=\"row\">Destination:</th>\r\n                              <td>{this.props.sampleObj.receivingLabName}</td>\r\n                              <th scope=\"row\">PCR Lab Number:</th>\r\n                              <td>{this.props.sampleObj.receivingLabID}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <th scope=\"row\">Status:</th>\r\n                              <td>{this.props.sampleObj.manifestStatus}</td>\r\n                              <th scope=\"row\">Manifest Id:</th>\r\n                              <td>{this.props.sampleObj.manifestID}</td>\r\n                              <th scope=\"row\">Sample Temperature:</th>\r\n                              <td>{this.props.sampleObj.temperatureAtPickup}</td>\r\n                            </tr>\r\n                             <tr>\r\n                              <th scope=\"row\">Courier Name:</th>\r\n                              <td>{this.props.sampleObj.courierRiderName}</td>\r\n                              <th scope=\"row\">Courier Contact:</th>\r\n                              <td>{this.props.sampleObj.courierContact}</td>\r\n                              <th scope=\"row\">Test Type:</th>\r\n                              <td>VL</td>\r\n                            </tr>\r\n                      </tbody>\r\n                    </Table>\r\n              </div>\r\n              <br/>\r\n              <div>\r\n                     <Table striped bordered size=\"sm\">\r\n                        <thead style={{  backgroundColor:'#014d88', color:'#fff' }}>\r\n                          <tr>\r\n                            <th>Facility</th>\r\n                            <th>Patient ID</th>\r\n                            <th>Sample ID</th>\r\n                            <th>Sample Type</th>\r\n                            <th>Date Collected</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        { this.props.sampleObj.sampleInformation && this.props.sampleObj.sampleInformation.map((data, i) => (\r\n                             <tr key={i}>\r\n                                <td scope=\"row\">{this.props.sampleObj.sendingFacilityName}</td>\r\n                                <td>{data.patientID[0].idNumber}</td>\r\n                                <td>{data.sampleID}</td>\r\n                                <td>{data.sampleType}</td>\r\n                                <td>{data.sampleCollectionDate}</td>\r\n                              </tr>\r\n                        ))}\r\n\r\n                        </tbody>\r\n                      </Table>\r\n                </div>\r\n                <br />\r\n                <span>LAMISPlus 2.0</span>\r\n              </CardBody>\r\n             </Card>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ManifestPrint;","C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\gicha\\OneDrive\\Desktop\\DataFi-Nigeria\\Dev\\Lamisplus\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["243","244","245","246","247","248","249","250"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}",{"ruleId":"251","severity":1,"message":"252","line":4,"column":41,"nodeType":"253","messageId":"254","endLine":4,"endColumn":47},{"ruleId":"251","severity":1,"message":"255","line":16,"column":8,"nodeType":"253","messageId":"254","endLine":16,"endColumn":20},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"257","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":14},{"ruleId":"251","severity":1,"message":"258","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":17},{"ruleId":"251","severity":1,"message":"259","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":13},{"ruleId":"251","severity":1,"message":"260","line":5,"column":15,"nodeType":"253","messageId":"254","endLine":5,"endColumn":18},{"ruleId":"251","severity":1,"message":"261","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":11,"column":8,"nodeType":"253","messageId":"254","endLine":11,"endColumn":18},{"ruleId":"251","severity":1,"message":"264","line":19,"column":8,"nodeType":"253","messageId":"254","endLine":19,"endColumn":14},{"ruleId":"251","severity":1,"message":"265","line":20,"column":8,"nodeType":"253","messageId":"254","endLine":20,"endColumn":13},{"ruleId":"251","severity":1,"message":"266","line":149,"column":16,"nodeType":"253","messageId":"254","endLine":149,"endColumn":25},{"ruleId":"251","severity":1,"message":"267","line":152,"column":16,"nodeType":"253","messageId":"254","endLine":152,"endColumn":23},{"ruleId":"268","severity":1,"message":"269","line":185,"column":23,"nodeType":"270","messageId":"271","endLine":185,"endColumn":26},{"ruleId":"251","severity":1,"message":"272","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":20},{"ruleId":"251","severity":1,"message":"273","line":6,"column":9,"nodeType":"253","messageId":"254","endLine":6,"endColumn":15},{"ruleId":"251","severity":1,"message":"274","line":1,"column":27,"nodeType":"253","messageId":"254","endLine":1,"endColumn":38},{"ruleId":"251","severity":1,"message":"275","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":11},{"ruleId":"251","severity":1,"message":"276","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":18},{"ruleId":"277","severity":1,"message":"278","line":88,"column":49,"nodeType":"279","messageId":"271","endLine":88,"endColumn":51},{"ruleId":"251","severity":1,"message":"280","line":1,"column":50,"nodeType":"253","messageId":"254","endLine":1,"endColumn":56},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"259","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":13},{"ruleId":"251","severity":1,"message":"260","line":4,"column":15,"nodeType":"253","messageId":"254","endLine":4,"endColumn":18},{"ruleId":"251","severity":1,"message":"281","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":21},{"ruleId":"251","severity":1,"message":"282","line":8,"column":17,"nodeType":"253","messageId":"254","endLine":8,"endColumn":24},{"ruleId":"251","severity":1,"message":"261","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":13,"column":8,"nodeType":"253","messageId":"254","endLine":13,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":18},{"ruleId":"251","severity":1,"message":"264","line":21,"column":8,"nodeType":"253","messageId":"254","endLine":21,"endColumn":14},{"ruleId":"251","severity":1,"message":"265","line":22,"column":8,"nodeType":"253","messageId":"254","endLine":22,"endColumn":13},{"ruleId":"251","severity":1,"message":"283","line":99,"column":7,"nodeType":"253","messageId":"254","endLine":99,"endColumn":17},{"ruleId":"251","severity":1,"message":"284","line":123,"column":11,"nodeType":"253","messageId":"254","endLine":123,"endColumn":22},{"ruleId":"251","severity":1,"message":"285","line":126,"column":12,"nodeType":"253","messageId":"254","endLine":126,"endColumn":19},{"ruleId":"251","severity":1,"message":"286","line":127,"column":12,"nodeType":"253","messageId":"254","endLine":127,"endColumn":19},{"ruleId":"251","severity":1,"message":"287","line":127,"column":21,"nodeType":"253","messageId":"254","endLine":127,"endColumn":31},{"ruleId":"288","severity":1,"message":"289","line":143,"column":8,"nodeType":"290","endLine":143,"endColumn":10,"suggestions":"291"},{"ruleId":"251","severity":1,"message":"292","line":149,"column":11,"nodeType":"253","messageId":"254","endLine":149,"endColumn":23},{"ruleId":"251","severity":1,"message":"293","line":163,"column":11,"nodeType":"253","messageId":"254","endLine":163,"endColumn":25},{"ruleId":"294","severity":1,"message":"295","line":261,"column":59,"nodeType":"296","endLine":261,"endColumn":70},{"ruleId":"251","severity":1,"message":"280","line":1,"column":50,"nodeType":"253","messageId":"254","endLine":1,"endColumn":56},{"ruleId":"251","severity":1,"message":"297","line":1,"column":58,"nodeType":"253","messageId":"254","endLine":1,"endColumn":68},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"298","line":4,"column":26,"nodeType":"253","messageId":"254","endLine":4,"endColumn":31},{"ruleId":"251","severity":1,"message":"281","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":21},{"ruleId":"251","severity":1,"message":"299","line":11,"column":10,"nodeType":"253","messageId":"254","endLine":11,"endColumn":18},{"ruleId":"251","severity":1,"message":"300","line":12,"column":11,"nodeType":"253","messageId":"254","endLine":12,"endColumn":23},{"ruleId":"251","severity":1,"message":"301","line":12,"column":36,"nodeType":"253","messageId":"254","endLine":12,"endColumn":44},{"ruleId":"251","severity":1,"message":"302","line":14,"column":12,"nodeType":"253","messageId":"254","endLine":14,"endColumn":17},{"ruleId":"251","severity":1,"message":"261","line":18,"column":8,"nodeType":"253","messageId":"254","endLine":18,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":19,"column":8,"nodeType":"253","messageId":"254","endLine":19,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":20,"column":8,"nodeType":"253","messageId":"254","endLine":20,"endColumn":18},{"ruleId":"251","severity":1,"message":"303","line":22,"column":8,"nodeType":"253","messageId":"254","endLine":22,"endColumn":13},{"ruleId":"251","severity":1,"message":"304","line":24,"column":9,"nodeType":"253","messageId":"254","endLine":24,"endColumn":14},{"ruleId":"251","severity":1,"message":"305","line":24,"column":16,"nodeType":"253","messageId":"254","endLine":24,"endColumn":19},{"ruleId":"251","severity":1,"message":"265","line":27,"column":8,"nodeType":"253","messageId":"254","endLine":27,"endColumn":13},{"ruleId":"251","severity":1,"message":"285","line":95,"column":12,"nodeType":"253","messageId":"254","endLine":95,"endColumn":19},{"ruleId":"251","severity":1,"message":"306","line":106,"column":25,"nodeType":"253","messageId":"254","endLine":106,"endColumn":39},{"ruleId":"251","severity":1,"message":"274","line":1,"column":27,"nodeType":"253","messageId":"254","endLine":1,"endColumn":38},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"258","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":17},{"ruleId":"251","severity":1,"message":"259","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":13},{"ruleId":"251","severity":1,"message":"260","line":5,"column":15,"nodeType":"253","messageId":"254","endLine":5,"endColumn":18},{"ruleId":"251","severity":1,"message":"261","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":18},{"ruleId":"251","severity":1,"message":"297","line":12,"column":10,"nodeType":"253","messageId":"254","endLine":12,"endColumn":20},{"ruleId":"251","severity":1,"message":"264","line":17,"column":8,"nodeType":"253","messageId":"254","endLine":17,"endColumn":14},{"ruleId":"251","severity":1,"message":"265","line":18,"column":8,"nodeType":"253","messageId":"254","endLine":18,"endColumn":13},{"ruleId":"251","severity":1,"message":"285","line":90,"column":12,"nodeType":"253","messageId":"254","endLine":90,"endColumn":19},{"ruleId":"251","severity":1,"message":"307","line":90,"column":21,"nodeType":"253","messageId":"254","endLine":90,"endColumn":31},{"ruleId":"251","severity":1,"message":"308","line":91,"column":12,"nodeType":"253","messageId":"254","endLine":91,"endColumn":28},{"ruleId":"251","severity":1,"message":"309","line":91,"column":30,"nodeType":"253","messageId":"254","endLine":91,"endColumn":49},{"ruleId":"251","severity":1,"message":"310","line":92,"column":11,"nodeType":"253","messageId":"254","endLine":92,"endColumn":23},{"ruleId":"251","severity":1,"message":"311","line":93,"column":12,"nodeType":"253","messageId":"254","endLine":93,"endColumn":17},{"ruleId":"251","severity":1,"message":"312","line":93,"column":19,"nodeType":"253","messageId":"254","endLine":93,"endColumn":27},{"ruleId":"288","severity":1,"message":"313","line":110,"column":8,"nodeType":"290","endLine":110,"endColumn":10,"suggestions":"314"},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"257","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"315","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":17},{"ruleId":"251","severity":1,"message":"316","line":7,"column":10,"nodeType":"253","messageId":"254","endLine":7,"endColumn":21},{"ruleId":"251","severity":1,"message":"317","line":7,"column":23,"nodeType":"253","messageId":"254","endLine":7,"endColumn":38},{"ruleId":"251","severity":1,"message":"318","line":7,"column":52,"nodeType":"253","messageId":"254","endLine":7,"endColumn":60},{"ruleId":"251","severity":1,"message":"319","line":8,"column":9,"nodeType":"253","messageId":"254","endLine":8,"endColumn":13},{"ruleId":"251","severity":1,"message":"320","line":8,"column":14,"nodeType":"253","messageId":"254","endLine":8,"endColumn":22},{"ruleId":"251","severity":1,"message":"321","line":8,"column":23,"nodeType":"253","messageId":"254","endLine":8,"endColumn":33},{"ruleId":"251","severity":1,"message":"322","line":8,"column":34,"nodeType":"253","messageId":"254","endLine":8,"endColumn":42},{"ruleId":"251","severity":1,"message":"323","line":9,"column":10,"nodeType":"253","messageId":"254","endLine":9,"endColumn":15},{"ruleId":"251","severity":1,"message":"324","line":12,"column":11,"nodeType":"253","messageId":"254","endLine":12,"endColumn":16},{"ruleId":"251","severity":1,"message":"325","line":12,"column":18,"nodeType":"253","messageId":"254","endLine":12,"endColumn":29},{"ruleId":"251","severity":1,"message":"326","line":12,"column":31,"nodeType":"253","messageId":"254","endLine":12,"endColumn":40},{"ruleId":"251","severity":1,"message":"260","line":13,"column":5,"nodeType":"253","messageId":"254","endLine":13,"endColumn":8},{"ruleId":"251","severity":1,"message":"327","line":13,"column":9,"nodeType":"253","messageId":"254","endLine":13,"endColumn":14},{"ruleId":"251","severity":1,"message":"328","line":14,"column":5,"nodeType":"253","messageId":"254","endLine":14,"endColumn":14},{"ruleId":"251","severity":1,"message":"329","line":15,"column":5,"nodeType":"253","messageId":"254","endLine":15,"endColumn":10},{"ruleId":"251","severity":1,"message":"330","line":15,"column":11,"nodeType":"253","messageId":"254","endLine":15,"endColumn":15},{"ruleId":"251","severity":1,"message":"299","line":15,"column":17,"nodeType":"253","messageId":"254","endLine":15,"endColumn":25},{"ruleId":"251","severity":1,"message":"298","line":15,"column":27,"nodeType":"253","messageId":"254","endLine":15,"endColumn":32},{"ruleId":"251","severity":1,"message":"261","line":19,"column":8,"nodeType":"253","messageId":"254","endLine":19,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":20,"column":8,"nodeType":"253","messageId":"254","endLine":20,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":21,"column":8,"nodeType":"253","messageId":"254","endLine":21,"endColumn":18},{"ruleId":"251","severity":1,"message":"331","line":22,"column":8,"nodeType":"253","messageId":"254","endLine":22,"endColumn":16},{"ruleId":"251","severity":1,"message":"332","line":23,"column":8,"nodeType":"253","messageId":"254","endLine":23,"endColumn":18},{"ruleId":"251","severity":1,"message":"333","line":24,"column":8,"nodeType":"253","messageId":"254","endLine":24,"endColumn":24},{"ruleId":"251","severity":1,"message":"264","line":31,"column":8,"nodeType":"253","messageId":"254","endLine":31,"endColumn":14},{"ruleId":"251","severity":1,"message":"265","line":32,"column":8,"nodeType":"253","messageId":"254","endLine":32,"endColumn":13},{"ruleId":"251","severity":1,"message":"334","line":34,"column":16,"nodeType":"253","messageId":"254","endLine":34,"endColumn":26},{"ruleId":"251","severity":1,"message":"335","line":117,"column":11,"nodeType":"253","messageId":"254","endLine":117,"endColumn":18},{"ruleId":"336","severity":1,"message":"337","line":164,"column":54,"nodeType":"338","messageId":"339","endLine":164,"endColumn":56},{"ruleId":"336","severity":1,"message":"337","line":164,"column":96,"nodeType":"338","messageId":"339","endLine":164,"endColumn":98},{"ruleId":"336","severity":1,"message":"337","line":187,"column":55,"nodeType":"338","messageId":"339","endLine":187,"endColumn":57},{"ruleId":"336","severity":1,"message":"337","line":187,"column":97,"nodeType":"338","messageId":"339","endLine":187,"endColumn":99},{"ruleId":"336","severity":1,"message":"337","line":198,"column":55,"nodeType":"338","messageId":"339","endLine":198,"endColumn":57},{"ruleId":"336","severity":1,"message":"337","line":198,"column":97,"nodeType":"338","messageId":"339","endLine":198,"endColumn":99},{"ruleId":"251","severity":1,"message":"274","line":1,"column":27,"nodeType":"253","messageId":"254","endLine":1,"endColumn":38},{"ruleId":"251","severity":1,"message":"256","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"257","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":14},{"ruleId":"251","severity":1,"message":"258","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":17},{"ruleId":"251","severity":1,"message":"340","line":6,"column":8,"nodeType":"253","messageId":"254","endLine":6,"endColumn":17},{"ruleId":"251","severity":1,"message":"261","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":22},{"ruleId":"251","severity":1,"message":"262","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":15},{"ruleId":"251","severity":1,"message":"263","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":18},{"ruleId":"251","severity":1,"message":"341","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":24},{"ruleId":"251","severity":1,"message":"342","line":13,"column":8,"nodeType":"253","messageId":"254","endLine":13,"endColumn":19},{"ruleId":"251","severity":1,"message":"343","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":17},{"ruleId":"251","severity":1,"message":"344","line":15,"column":9,"nodeType":"253","messageId":"254","endLine":15,"endColumn":15},{"ruleId":"251","severity":1,"message":"324","line":17,"column":11,"nodeType":"253","messageId":"254","endLine":17,"endColumn":16},{"ruleId":"251","severity":1,"message":"325","line":17,"column":18,"nodeType":"253","messageId":"254","endLine":17,"endColumn":29},{"ruleId":"251","severity":1,"message":"326","line":17,"column":31,"nodeType":"253","messageId":"254","endLine":17,"endColumn":40},{"ruleId":"251","severity":1,"message":"260","line":18,"column":5,"nodeType":"253","messageId":"254","endLine":18,"endColumn":8},{"ruleId":"251","severity":1,"message":"298","line":18,"column":26,"nodeType":"253","messageId":"254","endLine":18,"endColumn":31},{"ruleId":"251","severity":1,"message":"301","line":19,"column":36,"nodeType":"253","messageId":"254","endLine":19,"endColumn":44},{"ruleId":"251","severity":1,"message":"302","line":21,"column":12,"nodeType":"253","messageId":"254","endLine":21,"endColumn":17},{"ruleId":"251","severity":1,"message":"297","line":24,"column":10,"nodeType":"253","messageId":"254","endLine":24,"endColumn":20},{"ruleId":"251","severity":1,"message":"265","line":29,"column":8,"nodeType":"253","messageId":"254","endLine":29,"endColumn":13},{"ruleId":"251","severity":1,"message":"285","line":94,"column":12,"nodeType":"253","messageId":"254","endLine":94,"endColumn":19},{"ruleId":"251","severity":1,"message":"307","line":94,"column":21,"nodeType":"253","messageId":"254","endLine":94,"endColumn":31},{"ruleId":"251","severity":1,"message":"308","line":95,"column":12,"nodeType":"253","messageId":"254","endLine":95,"endColumn":28},{"ruleId":"251","severity":1,"message":"309","line":95,"column":30,"nodeType":"253","messageId":"254","endLine":95,"endColumn":49},{"ruleId":"251","severity":1,"message":"345","line":96,"column":11,"nodeType":"253","messageId":"254","endLine":96,"endColumn":18},{"ruleId":"251","severity":1,"message":"346","line":101,"column":20,"nodeType":"253","messageId":"254","endLine":101,"endColumn":29},{"ruleId":"347","severity":1,"message":"348","line":149,"column":29,"nodeType":"349","messageId":"350","endLine":149,"endColumn":31},{"ruleId":"251","severity":1,"message":"351","line":1,"column":16,"nodeType":"253","messageId":"254","endLine":1,"endColumn":25},{"ruleId":"251","severity":1,"message":"274","line":1,"column":27,"nodeType":"253","messageId":"254","endLine":1,"endColumn":38},{"ruleId":"251","severity":1,"message":"352","line":1,"column":40,"nodeType":"253","messageId":"254","endLine":1,"endColumn":48},{"ruleId":"251","severity":1,"message":"257","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":14},{"ruleId":"251","severity":1,"message":"353","line":2,"column":16,"nodeType":"253","messageId":"254","endLine":2,"endColumn":26},{"ruleId":"251","severity":1,"message":"324","line":5,"column":11,"nodeType":"253","messageId":"254","endLine":5,"endColumn":16},{"ruleId":"251","severity":1,"message":"325","line":5,"column":18,"nodeType":"253","messageId":"254","endLine":5,"endColumn":29},{"ruleId":"251","severity":1,"message":"326","line":5,"column":31,"nodeType":"253","messageId":"254","endLine":5,"endColumn":40},{"ruleId":"251","severity":1,"message":"260","line":6,"column":5,"nodeType":"253","messageId":"254","endLine":6,"endColumn":8},{"ruleId":"251","severity":1,"message":"327","line":6,"column":9,"nodeType":"253","messageId":"254","endLine":6,"endColumn":14},{"ruleId":"251","severity":1,"message":"328","line":7,"column":5,"nodeType":"253","messageId":"254","endLine":7,"endColumn":14},{"ruleId":"251","severity":1,"message":"329","line":8,"column":5,"nodeType":"253","messageId":"254","endLine":8,"endColumn":10},{"ruleId":"354","severity":1,"message":"355","line":31,"column":41,"nodeType":"356","endLine":31,"endColumn":98},{"ruleId":"294","severity":1,"message":"295","line":93,"column":37,"nodeType":"296","endLine":93,"endColumn":48},{"ruleId":"251","severity":1,"message":"357","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":25},{"ruleId":"251","severity":1,"message":"261","line":11,"column":8,"nodeType":"253","messageId":"254","endLine":11,"endColumn":22},{"ruleId":"251","severity":1,"message":"358","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":20},{"ruleId":"251","severity":1,"message":"359","line":13,"column":8,"nodeType":"253","messageId":"254","endLine":13,"endColumn":20},{"ruleId":"251","severity":1,"message":"360","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":18},{"ruleId":"251","severity":1,"message":"361","line":16,"column":9,"nodeType":"253","messageId":"254","endLine":16,"endColumn":14},{"ruleId":"251","severity":1,"message":"362","line":30,"column":27,"nodeType":"253","messageId":"254","endLine":30,"endColumn":43},{"ruleId":"251","severity":1,"message":"363","line":36,"column":11,"nodeType":"253","messageId":"254","endLine":36,"endColumn":30},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'SampleSearch' is defined but never used.","'Container' is defined but never used.","'Link' is defined but never used.","'connect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'VisibilityIcon' is defined but never used.","'Tooltip' is defined but never used.","'IconButton' is defined but never used.","'Button' is defined but never used.","'Stack' is defined but never used.","'onSuccess' is assigned a value but never used.","'onError' is assigned a value but never used.","no-dupe-keys","Duplicate key 'age'.","ObjectExpression","unexpected","'makeStyles' is defined but never used.","'labObj' is defined but never used.","'useCallback' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useRef' is defined but never used.","'MaterialTable' is defined but never used.","'Spinner' is defined but never used.","'tableIcons' is assigned a value but never used.","'permissions' is assigned a value but never used.","'loading' is assigned a value but never used.","'results' is assigned a value but never used.","'setResults' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'manifestObj.id'. Either include it or remove the dependency array.","ArrayExpression",["364"],"'sampleStatus' is assigned a value but never used.","'resultTestType' is assigned a value but never used.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'forwardRef' is defined but never used.","'Table' is defined but never used.","'CardBody' is defined but never used.","'FormFeedback' is defined but never used.","'FormText' is defined but never used.","'Badge' is defined but never used.","'axios' is defined but never used.","'token' is defined but never used.","'url' is defined but never used.","'setInputFields' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'collectedSamples' is assigned a value but never used.","'setCollectedSamples' is assigned a value but never used.","'manifestData' is assigned a value but never used.","'saved' is assigned a value but never used.","'setSaved' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.",["365"],"'MatButton' is defined but never used.","'MdDashboard' is defined but never used.","'MdDeleteForever' is defined but never used.","'MdPerson' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'alpha' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Input' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Card' is defined but never used.","'SaveIcon' is defined but never used.","'CancelIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'FaUserPlus' is defined but never used.","'classes' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'TextField' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'format' is defined but never used.","'samples' is assigned a value but never used.","'setStatus' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ArrowDropDownIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.",{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},"Update the dependencies array to be: [manifestObj.id]",{"range":"370","text":"371"},"Update the dependencies array to be: [sampleObj]",{"range":"372","text":"373"},[5246,5248],"[manifestObj.id]",[3156,3158],"[sampleObj]"]